
Oximeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003594  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800371c  0800371c  0001371c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003b98  08003b98  00013b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003b9c  08003b9c  00013b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08003ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
  7 .bss          000000e4  2000001c  2000001c  0002001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000100  20000100  0002001c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000bb31  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001f25  00000000  00000000  0002bb7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d08  00000000  00000000  0002daa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000be8  00000000  00000000  0002e7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000496f  00000000  00000000  0002f398  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003f92  00000000  00000000  00033d07  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00037c99  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003924  00000000  00000000  00037d18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003704 	.word	0x08003704

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08003704 	.word	0x08003704

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__gedf2>:
 8000538:	f04f 3cff 	mov.w	ip, #4294967295
 800053c:	e006      	b.n	800054c <__cmpdf2+0x4>
 800053e:	bf00      	nop

08000540 <__ledf2>:
 8000540:	f04f 0c01 	mov.w	ip, #1
 8000544:	e002      	b.n	800054c <__cmpdf2+0x4>
 8000546:	bf00      	nop

08000548 <__cmpdf2>:
 8000548:	f04f 0c01 	mov.w	ip, #1
 800054c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000550:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000554:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000558:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800055c:	bf18      	it	ne
 800055e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000562:	d01b      	beq.n	800059c <__cmpdf2+0x54>
 8000564:	b001      	add	sp, #4
 8000566:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800056a:	bf0c      	ite	eq
 800056c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000570:	ea91 0f03 	teqne	r1, r3
 8000574:	bf02      	ittt	eq
 8000576:	ea90 0f02 	teqeq	r0, r2
 800057a:	2000      	moveq	r0, #0
 800057c:	4770      	bxeq	lr
 800057e:	f110 0f00 	cmn.w	r0, #0
 8000582:	ea91 0f03 	teq	r1, r3
 8000586:	bf58      	it	pl
 8000588:	4299      	cmppl	r1, r3
 800058a:	bf08      	it	eq
 800058c:	4290      	cmpeq	r0, r2
 800058e:	bf2c      	ite	cs
 8000590:	17d8      	asrcs	r0, r3, #31
 8000592:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000596:	f040 0001 	orr.w	r0, r0, #1
 800059a:	4770      	bx	lr
 800059c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005a4:	d102      	bne.n	80005ac <__cmpdf2+0x64>
 80005a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005aa:	d107      	bne.n	80005bc <__cmpdf2+0x74>
 80005ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b4:	d1d6      	bne.n	8000564 <__cmpdf2+0x1c>
 80005b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005ba:	d0d3      	beq.n	8000564 <__cmpdf2+0x1c>
 80005bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <__aeabi_cdrcmple>:
 80005c4:	4684      	mov	ip, r0
 80005c6:	4610      	mov	r0, r2
 80005c8:	4662      	mov	r2, ip
 80005ca:	468c      	mov	ip, r1
 80005cc:	4619      	mov	r1, r3
 80005ce:	4663      	mov	r3, ip
 80005d0:	e000      	b.n	80005d4 <__aeabi_cdcmpeq>
 80005d2:	bf00      	nop

080005d4 <__aeabi_cdcmpeq>:
 80005d4:	b501      	push	{r0, lr}
 80005d6:	f7ff ffb7 	bl	8000548 <__cmpdf2>
 80005da:	2800      	cmp	r0, #0
 80005dc:	bf48      	it	mi
 80005de:	f110 0f00 	cmnmi.w	r0, #0
 80005e2:	bd01      	pop	{r0, pc}

080005e4 <__aeabi_dcmpeq>:
 80005e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005e8:	f7ff fff4 	bl	80005d4 <__aeabi_cdcmpeq>
 80005ec:	bf0c      	ite	eq
 80005ee:	2001      	moveq	r0, #1
 80005f0:	2000      	movne	r0, #0
 80005f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005f6:	bf00      	nop

080005f8 <__aeabi_dcmplt>:
 80005f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005fc:	f7ff ffea 	bl	80005d4 <__aeabi_cdcmpeq>
 8000600:	bf34      	ite	cc
 8000602:	2001      	movcc	r0, #1
 8000604:	2000      	movcs	r0, #0
 8000606:	f85d fb08 	ldr.w	pc, [sp], #8
 800060a:	bf00      	nop

0800060c <__aeabi_dcmple>:
 800060c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000610:	f7ff ffe0 	bl	80005d4 <__aeabi_cdcmpeq>
 8000614:	bf94      	ite	ls
 8000616:	2001      	movls	r0, #1
 8000618:	2000      	movhi	r0, #0
 800061a:	f85d fb08 	ldr.w	pc, [sp], #8
 800061e:	bf00      	nop

08000620 <__aeabi_dcmpge>:
 8000620:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000624:	f7ff ffce 	bl	80005c4 <__aeabi_cdrcmple>
 8000628:	bf94      	ite	ls
 800062a:	2001      	movls	r0, #1
 800062c:	2000      	movhi	r0, #0
 800062e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000632:	bf00      	nop

08000634 <__aeabi_dcmpgt>:
 8000634:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000638:	f7ff ffc4 	bl	80005c4 <__aeabi_cdrcmple>
 800063c:	bf34      	ite	cc
 800063e:	2001      	movcc	r0, #1
 8000640:	2000      	movcs	r0, #0
 8000642:	f85d fb08 	ldr.w	pc, [sp], #8
 8000646:	bf00      	nop

08000648 <__aeabi_d2uiz>:
 8000648:	004a      	lsls	r2, r1, #1
 800064a:	d211      	bcs.n	8000670 <__aeabi_d2uiz+0x28>
 800064c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000650:	d211      	bcs.n	8000676 <__aeabi_d2uiz+0x2e>
 8000652:	d50d      	bpl.n	8000670 <__aeabi_d2uiz+0x28>
 8000654:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000658:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800065c:	d40e      	bmi.n	800067c <__aeabi_d2uiz+0x34>
 800065e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000662:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000666:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800066a:	fa23 f002 	lsr.w	r0, r3, r2
 800066e:	4770      	bx	lr
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	4770      	bx	lr
 8000676:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800067a:	d102      	bne.n	8000682 <__aeabi_d2uiz+0x3a>
 800067c:	f04f 30ff 	mov.w	r0, #4294967295
 8000680:	4770      	bx	lr
 8000682:	f04f 0000 	mov.w	r0, #0
 8000686:	4770      	bx	lr

08000688 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000690:	2300      	movs	r3, #0
 8000692:	73fb      	strb	r3, [r7, #15]
 8000694:	2300      	movs	r3, #0
 8000696:	73bb      	strb	r3, [r7, #14]
 8000698:	230f      	movs	r3, #15
 800069a:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	78db      	ldrb	r3, [r3, #3]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d039      	beq.n	8000718 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80006a4:	4b27      	ldr	r3, [pc, #156]	; (8000744 <NVIC_Init+0xbc>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	43db      	mvns	r3, r3
 80006aa:	0a1b      	lsrs	r3, r3, #8
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	f1c3 0304 	rsb	r3, r3, #4
 80006ba:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80006bc:	7b7a      	ldrb	r2, [r7, #13]
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	fa42 f303 	asr.w	r3, r2, r3
 80006c4:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	785b      	ldrb	r3, [r3, #1]
 80006ca:	461a      	mov	r2, r3
 80006cc:	7bbb      	ldrb	r3, [r7, #14]
 80006ce:	fa02 f303 	lsl.w	r3, r2, r3
 80006d2:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	789a      	ldrb	r2, [r3, #2]
 80006d8:	7b7b      	ldrb	r3, [r7, #13]
 80006da:	4013      	ands	r3, r2
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	011b      	lsls	r3, r3, #4
 80006e8:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80006ea:	4a17      	ldr	r2, [pc, #92]	; (8000748 <NVIC_Init+0xc0>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	4413      	add	r3, r2
 80006f2:	7bfa      	ldrb	r2, [r7, #15]
 80006f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80006f8:	4a13      	ldr	r2, [pc, #76]	; (8000748 <NVIC_Init+0xc0>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	095b      	lsrs	r3, r3, #5
 8000700:	b2db      	uxtb	r3, r3
 8000702:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	f003 031f 	and.w	r3, r3, #31
 800070c:	2101      	movs	r1, #1
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000712:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000716:	e00f      	b.n	8000738 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000718:	490b      	ldr	r1, [pc, #44]	; (8000748 <NVIC_Init+0xc0>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	095b      	lsrs	r3, r3, #5
 8000720:	b2db      	uxtb	r3, r3
 8000722:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	f003 031f 	and.w	r3, r3, #31
 800072c:	2201      	movs	r2, #1
 800072e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000730:	f100 0320 	add.w	r3, r0, #32
 8000734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000ed00 	.word	0xe000ed00
 8000748:	e000e100 	.word	0xe000e100

0800074c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800076a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800076e:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800077a:	4313      	orrs	r3, r2
 800077c:	68fa      	ldr	r2, [r7, #12]
 800077e:	4313      	orrs	r3, r2
 8000780:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	68fa      	ldr	r2, [r7, #12]
 8000786:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <ADC_Init+0xa8>)
 8000792:	4013      	ands	r3, r2
 8000794:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800079e:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80007a4:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	795b      	ldrb	r3, [r3, #5]
 80007aa:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80007ac:	4313      	orrs	r3, r2
 80007ae:	68fa      	ldr	r2, [r7, #12]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007be:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80007c6:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	7d1b      	ldrb	r3, [r3, #20]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	7afb      	ldrb	r3, [r7, #11]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80007d6:	7afb      	ldrb	r3, [r7, #11]
 80007d8:	051b      	lsls	r3, r3, #20
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	4313      	orrs	r3, r2
 80007de:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	c0fff7fd 	.word	0xc0fff7fd

080007f8 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <ADC_CommonInit+0x48>)
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <ADC_CommonInit+0x4c>)
 800080e:	4013      	ands	r3, r2
 8000810:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800081a:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000820:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000826:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000828:	68fa      	ldr	r2, [r7, #12]
 800082a:	4313      	orrs	r3, r2
 800082c:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 800082e:	4a04      	ldr	r2, [pc, #16]	; (8000840 <ADC_CommonInit+0x48>)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	6053      	str	r3, [r2, #4]
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	40012300 	.word	0x40012300
 8000844:	fffc30e0 	.word	0xfffc30e0

08000848 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000854:	78fb      	ldrb	r3, [r7, #3]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d006      	beq.n	8000868 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	f043 0201 	orr.w	r2, r3, #1
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000866:	e005      	b.n	8000874 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	f023 0201 	bic.w	r2, r3, #1
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	609a      	str	r2, [r3, #8]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	4608      	mov	r0, r1
 800088a:	4611      	mov	r1, r2
 800088c:	461a      	mov	r2, r3
 800088e:	4603      	mov	r3, r0
 8000890:	70fb      	strb	r3, [r7, #3]
 8000892:	460b      	mov	r3, r1
 8000894:	70bb      	strb	r3, [r7, #2]
 8000896:	4613      	mov	r3, r2
 8000898:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80008a2:	78fb      	ldrb	r3, [r7, #3]
 80008a4:	2b09      	cmp	r3, #9
 80008a6:	d923      	bls.n	80008f0 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80008ae:	78fb      	ldrb	r3, [r7, #3]
 80008b0:	f1a3 020a 	sub.w	r2, r3, #10
 80008b4:	4613      	mov	r3, r2
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	4413      	add	r3, r2
 80008ba:	2207      	movs	r2, #7
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	43db      	mvns	r3, r3
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	4013      	ands	r3, r2
 80008ca:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80008cc:	7879      	ldrb	r1, [r7, #1]
 80008ce:	78fb      	ldrb	r3, [r7, #3]
 80008d0:	f1a3 020a 	sub.w	r2, r3, #10
 80008d4:	4613      	mov	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	4413      	add	r3, r2
 80008da:	fa01 f303 	lsl.w	r3, r1, r3
 80008de:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	e01e      	b.n	800092e <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	691b      	ldr	r3, [r3, #16]
 80008f4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80008f6:	78fa      	ldrb	r2, [r7, #3]
 80008f8:	4613      	mov	r3, r2
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	4413      	add	r3, r2
 80008fe:	2207      	movs	r2, #7
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	43db      	mvns	r3, r3
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	4013      	ands	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000910:	7879      	ldrb	r1, [r7, #1]
 8000912:	78fa      	ldrb	r2, [r7, #3]
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	fa01 f303 	lsl.w	r3, r1, r3
 800091e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000920:	68fa      	ldr	r2, [r7, #12]
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	4313      	orrs	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800092e:	78bb      	ldrb	r3, [r7, #2]
 8000930:	2b06      	cmp	r3, #6
 8000932:	d821      	bhi.n	8000978 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000938:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 800093a:	78bb      	ldrb	r3, [r7, #2]
 800093c:	1e5a      	subs	r2, r3, #1
 800093e:	4613      	mov	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4413      	add	r3, r2
 8000944:	221f      	movs	r2, #31
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	43db      	mvns	r3, r3
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	4013      	ands	r3, r2
 8000954:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000956:	78f9      	ldrb	r1, [r7, #3]
 8000958:	78bb      	ldrb	r3, [r7, #2]
 800095a:	1e5a      	subs	r2, r3, #1
 800095c:	4613      	mov	r3, r2
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	4413      	add	r3, r2
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000968:	68fa      	ldr	r2, [r7, #12]
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	4313      	orrs	r3, r2
 800096e:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000976:	e047      	b.n	8000a08 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 8000978:	78bb      	ldrb	r3, [r7, #2]
 800097a:	2b0c      	cmp	r3, #12
 800097c:	d821      	bhi.n	80009c2 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000984:	78bb      	ldrb	r3, [r7, #2]
 8000986:	1fda      	subs	r2, r3, #7
 8000988:	4613      	mov	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	4413      	add	r3, r2
 800098e:	221f      	movs	r2, #31
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	43db      	mvns	r3, r3
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	4013      	ands	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80009a0:	78f9      	ldrb	r1, [r7, #3]
 80009a2:	78bb      	ldrb	r3, [r7, #2]
 80009a4:	1fda      	subs	r2, r3, #7
 80009a6:	4613      	mov	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	4413      	add	r3, r2
 80009ac:	fa01 f303 	lsl.w	r3, r1, r3
 80009b0:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	68fa      	ldr	r2, [r7, #12]
 80009be:	631a      	str	r2, [r3, #48]	; 0x30
}
 80009c0:	e022      	b.n	8000a08 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c6:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 80009c8:	78bb      	ldrb	r3, [r7, #2]
 80009ca:	f1a3 020d 	sub.w	r2, r3, #13
 80009ce:	4613      	mov	r3, r2
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	4413      	add	r3, r2
 80009d4:	221f      	movs	r2, #31
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	43db      	mvns	r3, r3
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	4013      	ands	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80009e6:	78f9      	ldrb	r1, [r7, #3]
 80009e8:	78bb      	ldrb	r3, [r7, #2]
 80009ea:	f1a3 020d 	sub.w	r2, r3, #13
 80009ee:	4613      	mov	r3, r2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	4413      	add	r3, r2
 80009f4:	fa01 f303 	lsl.w	r3, r1, r3
 80009f8:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	68fa      	ldr	r2, [r7, #12]
 8000a06:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	609a      	str	r2, [r3, #8]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a40:	b29b      	uxth	r3, r3
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b085      	sub	sp, #20
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
 8000a56:	460b      	mov	r3, r1
 8000a58:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	78fb      	ldrb	r3, [r7, #3]
 8000a64:	4013      	ands	r3, r2
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d002      	beq.n	8000a70 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	73fb      	strb	r3, [r7, #15]
 8000a6e:	e001      	b.n	8000a74 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
	...

08000a84 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <DAC_Init+0x64>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8000a9c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	689b      	ldr	r3, [r3, #8]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000abc:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_OutputBuffer);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	68db      	ldr	r3, [r3, #12]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	60bb      	str	r3, [r7, #8]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <DAC_Init+0x64>)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	6013      	str	r3, [r2, #0]
}
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40007400 	.word	0x40007400

08000aec <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000af8:	78fb      	ldrb	r3, [r7, #3]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d009      	beq.n	8000b12 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8000afe:	490d      	ldr	r1, [pc, #52]	; (8000b34 <DAC_Cmd+0x48>)
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <DAC_Cmd+0x48>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	2001      	movs	r0, #1
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	fa00 f303 	lsl.w	r3, r0, r3
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8000b10:	e009      	b.n	8000b26 <DAC_Cmd+0x3a>
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8000b12:	4908      	ldr	r1, [pc, #32]	; (8000b34 <DAC_Cmd+0x48>)
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <DAC_Cmd+0x48>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	2001      	movs	r0, #1
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	fa00 f303 	lsl.w	r3, r0, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	4013      	ands	r3, r2
 8000b24:	600b      	str	r3, [r1, #0]
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40007400 	.word	0x40007400

08000b38 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <DAC_SetChannel1Data+0x34>)
 8000b4a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	3308      	adds	r3, #8
 8000b54:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	887b      	ldrh	r3, [r7, #2]
 8000b5c:	6013      	str	r3, [r2, #0]
}
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40007400 	.word	0x40007400

08000b70 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <DAC_SetChannel2Data+0x34>)
 8000b82:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	3314      	adds	r3, #20
 8000b8c:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	461a      	mov	r2, r3
 8000b92:	887b      	ldrh	r3, [r7, #2]
 8000b94:	6013      	str	r3, [r2, #0]
}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40007400 	.word	0x40007400

08000ba8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b087      	sub	sp, #28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	e076      	b.n	8000cb2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000bd8:	68fa      	ldr	r2, [r7, #12]
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d165      	bne.n	8000cac <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	2103      	movs	r1, #3
 8000bea:	fa01 f303 	lsl.w	r3, r1, r3
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	401a      	ands	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	791b      	ldrb	r3, [r3, #4]
 8000bfe:	4619      	mov	r1, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	fa01 f303 	lsl.w	r3, r1, r3
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	791b      	ldrb	r3, [r3, #4]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d003      	beq.n	8000c1e <GPIO_Init+0x76>
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	791b      	ldrb	r3, [r3, #4]
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d12e      	bne.n	8000c7c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	689a      	ldr	r2, [r3, #8]
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	2103      	movs	r1, #3
 8000c28:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	401a      	ands	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	689a      	ldr	r2, [r3, #8]
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	795b      	ldrb	r3, [r3, #5]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	431a      	orrs	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685a      	ldr	r2, [r3, #4]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	4619      	mov	r1, r3
 8000c56:	2301      	movs	r3, #1
 8000c58:	408b      	lsls	r3, r1
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	683a      	ldr	r2, [r7, #0]
 8000c68:	7992      	ldrb	r2, [r2, #6]
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	b292      	uxth	r2, r2
 8000c70:	fa01 f202 	lsl.w	r2, r1, r2
 8000c74:	b292      	uxth	r2, r2
 8000c76:	431a      	orrs	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	68da      	ldr	r2, [r3, #12]
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	2103      	movs	r1, #3
 8000c88:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	401a      	ands	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68da      	ldr	r2, [r3, #12]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	79db      	ldrb	r3, [r3, #7]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	431a      	orrs	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	2b0f      	cmp	r3, #15
 8000cb6:	d985      	bls.n	8000bc4 <GPIO_Init+0x1c>
    }
  }
}
 8000cb8:	bf00      	nop
 8000cba:	371c      	adds	r7, #28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	887a      	ldrh	r2, [r7, #2]
 8000cd4:	831a      	strh	r2, [r3, #24]
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	460b      	mov	r3, r1
 8000cec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	887a      	ldrh	r2, [r7, #2]
 8000cf2:	835a      	strh	r2, [r3, #26]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d18:	787a      	ldrb	r2, [r7, #1]
 8000d1a:	887b      	ldrh	r3, [r7, #2]
 8000d1c:	f003 0307 	and.w	r3, r3, #7
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d28:	887b      	ldrh	r3, [r7, #2]
 8000d2a:	08db      	lsrs	r3, r3, #3
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	08db      	lsrs	r3, r3, #3
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	461a      	mov	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3208      	adds	r2, #8
 8000d3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d40:	887b      	ldrh	r3, [r7, #2]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	210f      	movs	r1, #15
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	ea02 0103 	and.w	r1, r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f100 0208 	add.w	r2, r0, #8
 8000d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000d5e:	887b      	ldrh	r3, [r7, #2]
 8000d60:	08db      	lsrs	r3, r3, #3
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	461a      	mov	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3208      	adds	r2, #8
 8000d6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000d74:	887b      	ldrh	r3, [r7, #2]
 8000d76:	08db      	lsrs	r3, r3, #3
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3208      	adds	r2, #8
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000d86:	bf00      	nop
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000da2:	2300      	movs	r3, #0
 8000da4:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8000da6:	2304      	movs	r3, #4
 8000da8:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000daa:	4b57      	ldr	r3, [pc, #348]	; (8000f08 <I2C_Init+0x174>)
 8000dac:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	889b      	ldrh	r3, [r3, #4]
 8000db2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000db4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000db6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000dba:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 f8d9 	bl	8000f78 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	4a4f      	ldr	r2, [pc, #316]	; (8000f0c <I2C_Init+0x178>)
 8000dce:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd2:	0c9b      	lsrs	r3, r3, #18
 8000dd4:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000dd6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000dd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000de2:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	f023 0301 	bic.w	r3, r3, #1
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a44      	ldr	r2, [pc, #272]	; (8000f10 <I2C_Init+0x17c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d815      	bhi.n	8000e2e <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	69fa      	ldr	r2, [r7, #28]
 8000e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0e:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000e10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d801      	bhi.n	8000e1a <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000e16:	2304      	movs	r3, #4
 8000e18:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000e1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000e22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e24:	3301      	adds	r3, #1
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	841a      	strh	r2, [r3, #32]
 8000e2c:	e040      	b.n	8000eb0 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	88db      	ldrh	r3, [r3, #6]
 8000e32:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d109      	bne.n	8000e4e <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4413      	add	r3, r2
 8000e44:	69fa      	ldr	r2, [r7, #28]
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000e4c:	e00e      	b.n	8000e6c <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	4613      	mov	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	009a      	lsls	r2, r3, #2
 8000e5a:	4413      	add	r3, r2
 8000e5c:	69fa      	ldr	r2, [r7, #28]
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000e64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000e6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d103      	bne.n	8000e7e <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000e76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8000e7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000e80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e82:	4313      	orrs	r3, r2
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000e8e:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000e90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e96:	fb02 f303 	mul.w	r3, r2, r3
 8000e9a:	4a1e      	ldr	r2, [pc, #120]	; (8000f14 <I2C_Init+0x180>)
 8000e9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea0:	1192      	asrs	r2, r2, #6
 8000ea2:	17db      	asrs	r3, r3, #31
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000eb4:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000ecc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ece:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8000ed2:	f023 0302 	bic.w	r3, r3, #2
 8000ed6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	889a      	ldrh	r2, [r3, #4]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	895b      	ldrh	r3, [r3, #10]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000eee:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	899a      	ldrh	r2, [r3, #12]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	891b      	ldrh	r3, [r3, #8]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	811a      	strh	r2, [r3, #8]
}
 8000f00:	bf00      	nop
 8000f02:	3728      	adds	r7, #40	; 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	007a1200 	.word	0x007a1200
 8000f0c:	431bde83 	.word	0x431bde83
 8000f10:	000186a0 	.word	0x000186a0
 8000f14:	10624dd3 	.word	0x10624dd3

08000f18 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	8a9b      	ldrh	r3, [r3, #20]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	8b1b      	ldrh	r3, [r3, #24]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	041b      	lsls	r3, r3, #16
 8000f46:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000f52:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	401a      	ands	r2, r3
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d102      	bne.n	8000f66 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8000f60:	2301      	movs	r3, #1
 8000f62:	75fb      	strb	r3, [r7, #23]
 8000f64:	e001      	b.n	8000f6a <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8000f66:	2300      	movs	r3, #0
 8000f68:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8000f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	371c      	adds	r7, #28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	2302      	movs	r3, #2
 8000f96:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000f98:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <RCC_GetClocksFreq+0x140>)
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f003 030c 	and.w	r3, r3, #12
 8000fa0:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	d007      	beq.n	8000fb8 <RCC_GetClocksFreq+0x40>
 8000fa8:	2b08      	cmp	r3, #8
 8000faa:	d009      	beq.n	8000fc0 <RCC_GetClocksFreq+0x48>
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d13d      	bne.n	800102c <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a42      	ldr	r2, [pc, #264]	; (80010bc <RCC_GetClocksFreq+0x144>)
 8000fb4:	601a      	str	r2, [r3, #0]
      break;
 8000fb6:	e03d      	b.n	8001034 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a41      	ldr	r2, [pc, #260]	; (80010c0 <RCC_GetClocksFreq+0x148>)
 8000fbc:	601a      	str	r2, [r3, #0]
      break;
 8000fbe:	e039      	b.n	8001034 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000fc0:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <RCC_GetClocksFreq+0x140>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	0d9b      	lsrs	r3, r3, #22
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fcc:	4b3a      	ldr	r3, [pc, #232]	; (80010b8 <RCC_GetClocksFreq+0x140>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fd4:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00c      	beq.n	8000ff6 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000fdc:	4a38      	ldr	r2, [pc, #224]	; (80010c0 <RCC_GetClocksFreq+0x148>)
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe4:	4a34      	ldr	r2, [pc, #208]	; (80010b8 <RCC_GetClocksFreq+0x140>)
 8000fe6:	6852      	ldr	r2, [r2, #4]
 8000fe8:	0992      	lsrs	r2, r2, #6
 8000fea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000fee:	fb02 f303 	mul.w	r3, r2, r3
 8000ff2:	61fb      	str	r3, [r7, #28]
 8000ff4:	e00b      	b.n	800100e <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000ff6:	4a31      	ldr	r2, [pc, #196]	; (80010bc <RCC_GetClocksFreq+0x144>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4a2e      	ldr	r2, [pc, #184]	; (80010b8 <RCC_GetClocksFreq+0x140>)
 8001000:	6852      	ldr	r2, [r2, #4]
 8001002:	0992      	lsrs	r2, r2, #6
 8001004:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001008:	fb02 f303 	mul.w	r3, r2, r3
 800100c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800100e:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <RCC_GetClocksFreq+0x140>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	0c1b      	lsrs	r3, r3, #16
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	3301      	adds	r3, #1
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800101e:	69fa      	ldr	r2, [r7, #28]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	fbb2 f2f3 	udiv	r2, r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	601a      	str	r2, [r3, #0]
      break;
 800102a:	e003      	b.n	8001034 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a23      	ldr	r2, [pc, #140]	; (80010bc <RCC_GetClocksFreq+0x144>)
 8001030:	601a      	str	r2, [r3, #0]
      break;
 8001032:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001034:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <RCC_GetClocksFreq+0x140>)
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800103c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	091b      	lsrs	r3, r3, #4
 8001042:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001044:	4a1f      	ldr	r2, [pc, #124]	; (80010c4 <RCC_GetClocksFreq+0x14c>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	4413      	add	r3, r2
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	40da      	lsrs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <RCC_GetClocksFreq+0x140>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001064:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	0a9b      	lsrs	r3, r3, #10
 800106a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800106c:	4a15      	ldr	r2, [pc, #84]	; (80010c4 <RCC_GetClocksFreq+0x14c>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	4413      	add	r3, r2
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	40da      	lsrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <RCC_GetClocksFreq+0x140>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800108c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	0b5b      	lsrs	r3, r3, #13
 8001092:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001094:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <RCC_GetClocksFreq+0x14c>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	4413      	add	r3, r2
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	40da      	lsrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	60da      	str	r2, [r3, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3724      	adds	r7, #36	; 0x24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	40023800 	.word	0x40023800
 80010bc:	00f42400 	.word	0x00f42400
 80010c0:	007a1200 	.word	0x007a1200
 80010c4:	20000000 	.word	0x20000000

080010c8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d006      	beq.n	80010e8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80010da:	490a      	ldr	r1, [pc, #40]	; (8001104 <RCC_AHB1PeriphClockCmd+0x3c>)
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <RCC_AHB1PeriphClockCmd+0x3c>)
 80010de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80010e6:	e006      	b.n	80010f6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80010e8:	4906      	ldr	r1, [pc, #24]	; (8001104 <RCC_AHB1PeriphClockCmd+0x3c>)
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <RCC_AHB1PeriphClockCmd+0x3c>)
 80010ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	4013      	ands	r3, r2
 80010f4:	630b      	str	r3, [r1, #48]	; 0x30
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800

08001108 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d006      	beq.n	8001128 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800111a:	490a      	ldr	r1, [pc, #40]	; (8001144 <RCC_APB1PeriphClockCmd+0x3c>)
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <RCC_APB1PeriphClockCmd+0x3c>)
 800111e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4313      	orrs	r3, r2
 8001124:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001126:	e006      	b.n	8001136 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001128:	4906      	ldr	r1, [pc, #24]	; (8001144 <RCC_APB1PeriphClockCmd+0x3c>)
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <RCC_APB1PeriphClockCmd+0x3c>)
 800112c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	43db      	mvns	r3, r3
 8001132:	4013      	ands	r3, r2
 8001134:	640b      	str	r3, [r1, #64]	; 0x40
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800

08001148 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d006      	beq.n	8001168 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800115a:	490a      	ldr	r1, [pc, #40]	; (8001184 <RCC_APB2PeriphClockCmd+0x3c>)
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <RCC_APB2PeriphClockCmd+0x3c>)
 800115e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4313      	orrs	r3, r2
 8001164:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001166:	e006      	b.n	8001176 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001168:	4906      	ldr	r1, [pc, #24]	; (8001184 <RCC_APB2PeriphClockCmd+0x3c>)
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <RCC_APB2PeriphClockCmd+0x3c>)
 800116c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	43db      	mvns	r3, r3
 8001172:	4013      	ands	r3, r2
 8001174:	644b      	str	r3, [r1, #68]	; 0x44
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800

08001188 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a29      	ldr	r2, [pc, #164]	; (8001244 <TIM_TimeBaseInit+0xbc>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d013      	beq.n	80011cc <TIM_TimeBaseInit+0x44>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a28      	ldr	r2, [pc, #160]	; (8001248 <TIM_TimeBaseInit+0xc0>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d00f      	beq.n	80011cc <TIM_TimeBaseInit+0x44>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011b2:	d00b      	beq.n	80011cc <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a25      	ldr	r2, [pc, #148]	; (800124c <TIM_TimeBaseInit+0xc4>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d007      	beq.n	80011cc <TIM_TimeBaseInit+0x44>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a24      	ldr	r2, [pc, #144]	; (8001250 <TIM_TimeBaseInit+0xc8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d003      	beq.n	80011cc <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a23      	ldr	r2, [pc, #140]	; (8001254 <TIM_TimeBaseInit+0xcc>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d108      	bne.n	80011de <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80011cc:	89fb      	ldrh	r3, [r7, #14]
 80011ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011d2:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	885a      	ldrh	r2, [r3, #2]
 80011d8:	89fb      	ldrh	r3, [r7, #14]
 80011da:	4313      	orrs	r3, r2
 80011dc:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a1d      	ldr	r2, [pc, #116]	; (8001258 <TIM_TimeBaseInit+0xd0>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d00c      	beq.n	8001200 <TIM_TimeBaseInit+0x78>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a1c      	ldr	r2, [pc, #112]	; (800125c <TIM_TimeBaseInit+0xd4>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d008      	beq.n	8001200 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80011ee:	89fb      	ldrh	r3, [r7, #14]
 80011f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011f4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	891a      	ldrh	r2, [r3, #8]
 80011fa:	89fb      	ldrh	r3, [r7, #14]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	89fa      	ldrh	r2, [r7, #14]
 8001204:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	881a      	ldrh	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <TIM_TimeBaseInit+0xbc>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d003      	beq.n	8001226 <TIM_TimeBaseInit+0x9e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a09      	ldr	r2, [pc, #36]	; (8001248 <TIM_TimeBaseInit+0xc0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d104      	bne.n	8001230 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	7a9b      	ldrb	r3, [r3, #10]
 800122a:	b29a      	uxth	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2201      	movs	r2, #1
 8001234:	829a      	strh	r2, [r3, #20]
}
 8001236:	bf00      	nop
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40010000 	.word	0x40010000
 8001248:	40010400 	.word	0x40010400
 800124c:	40000400 	.word	0x40000400
 8001250:	40000800 	.word	0x40000800
 8001254:	40000c00 	.word	0x40000c00
 8001258:	40001000 	.word	0x40001000
 800125c:	40001400 	.word	0x40001400

08001260 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f04f 32ff 	mov.w	r2, #4294967295
 800126e:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	729a      	strb	r2, [r3, #10]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d008      	beq.n	80012b8 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80012b6:	e007      	b.n	80012c8 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	f023 0301 	bic.w	r3, r3, #1
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	801a      	strh	r2, [r3, #0]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
 80012e0:	4613      	mov	r3, r2
 80012e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80012e4:	787b      	ldrb	r3, [r7, #1]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d008      	beq.n	80012fc <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	899b      	ldrh	r3, [r3, #12]
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	887b      	ldrh	r3, [r7, #2]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80012fa:	e009      	b.n	8001310 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	899b      	ldrh	r3, [r3, #12]
 8001300:	b29a      	uxth	r2, r3
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	43db      	mvns	r3, r3
 8001306:	b29b      	uxth	r3, r3
 8001308:	4013      	ands	r3, r2
 800130a:	b29a      	uxth	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	819a      	strh	r2, [r3, #12]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8001328:	887b      	ldrh	r3, [r7, #2]
 800132a:	43db      	mvns	r3, r3
 800132c:	b29a      	uxth	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	821a      	strh	r2, [r3, #16]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800133e:	b480      	push	{r7}
 8001340:	b085      	sub	sp, #20
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800134a:	2300      	movs	r3, #0
 800134c:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800134e:	2300      	movs	r3, #0
 8001350:	81bb      	strh	r3, [r7, #12]
 8001352:	2300      	movs	r3, #0
 8001354:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	8a1b      	ldrh	r3, [r3, #16]
 800135a:	b29a      	uxth	r2, r3
 800135c:	887b      	ldrh	r3, [r7, #2]
 800135e:	4013      	ands	r3, r2
 8001360:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	899b      	ldrh	r3, [r3, #12]
 8001366:	b29a      	uxth	r2, r3
 8001368:	887b      	ldrh	r3, [r7, #2]
 800136a:	4013      	ands	r3, r2
 800136c:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800136e:	89bb      	ldrh	r3, [r7, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <TIM_GetITStatus+0x42>
 8001374:	897b      	ldrh	r3, [r7, #10]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 800137a:	2301      	movs	r3, #1
 800137c:	73fb      	strb	r3, [r7, #15]
 800137e:	e001      	b.n	8001384 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001384:	7bfb      	ldrb	r3, [r7, #15]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	460b      	mov	r3, r1
 800139c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800139e:	887b      	ldrh	r3, [r7, #2]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	821a      	strh	r2, [r3, #16]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	8a1b      	ldrh	r3, [r3, #16]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	88db      	ldrh	r3, [r3, #6]
 80013e2:	461a      	mov	r2, r3
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	4313      	orrs	r3, r2
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	899b      	ldrh	r3, [r3, #12]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001400:	f023 030c 	bic.w	r3, r3, #12
 8001404:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	889a      	ldrh	r2, [r3, #4]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	891b      	ldrh	r3, [r3, #8]
 800140e:	4313      	orrs	r3, r2
 8001410:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001416:	4313      	orrs	r3, r2
 8001418:	b29b      	uxth	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	4313      	orrs	r3, r2
 8001420:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	b29a      	uxth	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	8a9b      	ldrh	r3, [r3, #20]
 800142e:	b29b      	uxth	r3, r3
 8001430:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001438:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	899b      	ldrh	r3, [r3, #12]
 800143e:	461a      	mov	r2, r3
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	4313      	orrs	r3, r2
 8001444:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	b29a      	uxth	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fd90 	bl	8000f78 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a30      	ldr	r2, [pc, #192]	; (800151c <USART_Init+0x168>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d003      	beq.n	8001468 <USART_Init+0xb4>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a2f      	ldr	r2, [pc, #188]	; (8001520 <USART_Init+0x16c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d102      	bne.n	800146e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	623b      	str	r3, [r7, #32]
 800146c:	e001      	b.n	8001472 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	899b      	ldrh	r3, [r3, #12]
 8001476:	b29b      	uxth	r3, r3
 8001478:	b21b      	sxth	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	da0c      	bge.n	8001498 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800147e:	6a3a      	ldr	r2, [r7, #32]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	009a      	lsls	r2, r3, #2
 8001488:	441a      	add	r2, r3
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fbb2 f3f3 	udiv	r3, r2, r3
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	e00b      	b.n	80014b0 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001498:	6a3a      	ldr	r2, [r7, #32]
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	009a      	lsls	r2, r3, #2
 80014a2:	441a      	add	r2, r3
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ae:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	4a1c      	ldr	r2, [pc, #112]	; (8001524 <USART_Init+0x170>)
 80014b4:	fba2 2303 	umull	r2, r3, r2, r3
 80014b8:	095b      	lsrs	r3, r3, #5
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	091b      	lsrs	r3, r3, #4
 80014c2:	2264      	movs	r2, #100	; 0x64
 80014c4:	fb02 f303 	mul.w	r3, r2, r3
 80014c8:	69fa      	ldr	r2, [r7, #28]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	899b      	ldrh	r3, [r3, #12]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	da0c      	bge.n	80014f4 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	3332      	adds	r3, #50	; 0x32
 80014e0:	4a10      	ldr	r2, [pc, #64]	; (8001524 <USART_Init+0x170>)
 80014e2:	fba2 2303 	umull	r2, r3, r2, r3
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ee:	4313      	orrs	r3, r2
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
 80014f2:	e00b      	b.n	800150c <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	3332      	adds	r3, #50	; 0x32
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <USART_Init+0x170>)
 80014fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001500:	095b      	lsrs	r3, r3, #5
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001508:	4313      	orrs	r3, r2
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	b29a      	uxth	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	811a      	strh	r2, [r3, #8]
}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	; 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40011000 	.word	0x40011000
 8001520:	40011400 	.word	0x40011400
 8001524:	51eb851f 	.word	0x51eb851f

08001528 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d008      	beq.n	800154c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	899b      	ldrh	r3, [r3, #12]
 800153e:	b29b      	uxth	r3, r3
 8001540:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001544:	b29a      	uxth	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800154a:	e007      	b.n	800155c <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	899b      	ldrh	r3, [r3, #12]
 8001550:	b29b      	uxth	r3, r3
 8001552:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001556:	b29a      	uxth	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	819a      	strh	r2, [r3, #12]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001574:	887b      	ldrh	r3, [r7, #2]
 8001576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800157a:	b29a      	uxth	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	809a      	strh	r2, [r3, #4]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	887b      	ldrh	r3, [r7, #2]
 80015a4:	4013      	ands	r3, r2
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d002      	beq.n	80015b2 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80015ac:	2301      	movs	r3, #1
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	e001      	b.n	80015b6 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <InitADS1115>:
* \version 0.0.1
*
* \date 02.01.2019 Function created
*
*******************************************************************************/
void InitADS1115(void){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b090      	sub	sp, #64	; 0x40
 80015c8:	af02      	add	r7, sp, #8

	/*External 16bit ADC*/
	unsigned char data[2] = {0x83, 0xE3};
 80015ca:	4b3d      	ldr	r3, [pc, #244]	; (80016c0 <InitADS1115+0xfc>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	86bb      	strh	r3, [r7, #52]	; 0x34

	/*Init I2C*/
	Init_I2C(I2C1, I2C_PinsPack_3, I2C_CLOCK_FAST_MODE);
 80015d0:	4a3c      	ldr	r2, [pc, #240]	; (80016c4 <InitADS1115+0x100>)
 80015d2:	2102      	movs	r1, #2
 80015d4:	483c      	ldr	r0, [pc, #240]	; (80016c8 <InitADS1115+0x104>)
 80015d6:	f000 f9df 	bl	8001998 <Init_I2C>

	/*Write FS range 4.096 to adc*/
	I2C_WriteMulti(I2C1, 0x90, 0x01, data, 2);
 80015da:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80015de:	2302      	movs	r3, #2
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	4613      	mov	r3, r2
 80015e4:	2201      	movs	r2, #1
 80015e6:	2190      	movs	r1, #144	; 0x90
 80015e8:	4837      	ldr	r0, [pc, #220]	; (80016c8 <InitADS1115+0x104>)
 80015ea:	f000 fa71 	bl	8001ad0 <I2C_WriteMulti>
	/*Internal 12bit ADC*/
    GPIO_InitTypeDef GPIO_InitStruct;
    ADC_CommonInitTypeDef ADC_CommonInitStruct;
    ADC_InitTypeDef ADC_InitStruct;

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2, ENABLE);
 80015ee:	2101      	movs	r1, #1
 80015f0:	f44f 7040 	mov.w	r0, #768	; 0x300
 80015f4:	f7ff fda8 	bl	8001148 <RCC_APB2PeriphClockCmd>
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_DMA2, ENABLE);
 80015f8:	2101      	movs	r1, #1
 80015fa:	4834      	ldr	r0, [pc, #208]	; (80016cc <InitADS1115+0x108>)
 80015fc:	f7ff fd64 	bl	80010c8 <RCC_AHB1PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001600:	2101      	movs	r1, #1
 8001602:	2001      	movs	r0, #1
 8001604:	f7ff fd80 	bl	8001108 <RCC_APB1PeriphClockCmd>

    /*enable inputs for the ADC*/
    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6| GPIO_Pin_7;
 8001608:	23c0      	movs	r3, #192	; 0xc0
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AN;
 800160c:	2303      	movs	r3, #3
 800160e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800161c:	4619      	mov	r1, r3
 800161e:	482c      	ldr	r0, [pc, #176]	; (80016d0 <InitADS1115+0x10c>)
 8001620:	f7ff fac2 	bl	8000ba8 <GPIO_Init>

    /*ADC1 configuration*/
    ADC_CommonInitStruct.ADC_Mode = ADC_Mode_Independent;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
    ADC_CommonInitStruct.ADC_Prescaler = ADC_Prescaler_Div2;
 8001628:	2300      	movs	r3, #0
 800162a:	623b      	str	r3, [r7, #32]
    ADC_CommonInitStruct.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 800162c:	2300      	movs	r3, #0
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
    ADC_CommonInitStruct.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
    ADC_CommonInit(&ADC_CommonInitStruct);
 8001634:	f107 031c 	add.w	r3, r7, #28
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff f8dd 	bl	80007f8 <ADC_CommonInit>

    ADC_InitStruct.ADC_Resolution = ADC_Resolution_12b;
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
    ADC_InitStruct.ADC_ScanConvMode = DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	723b      	strb	r3, [r7, #8]
    ADC_InitStruct.ADC_ContinuousConvMode = ENABLE;
 8001646:	2301      	movs	r3, #1
 8001648:	727b      	strb	r3, [r7, #9]
    ADC_InitStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
    ADC_InitStruct.ADC_DataAlign = ADC_DataAlign_Right;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
    ADC_InitStruct.ADC_NbrOfConversion = 1;
 8001652:	2301      	movs	r3, #1
 8001654:	763b      	strb	r3, [r7, #24]
    ADC_Init(ADC1, &ADC_InitStruct);
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	4619      	mov	r1, r3
 800165a:	481e      	ldr	r0, [pc, #120]	; (80016d4 <InitADS1115+0x110>)
 800165c:	f7ff f876 	bl	800074c <ADC_Init>

    ADC_InitStruct.ADC_Resolution = ADC_Resolution_12b;
 8001660:	2300      	movs	r3, #0
 8001662:	607b      	str	r3, [r7, #4]
    ADC_InitStruct.ADC_ScanConvMode = DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	723b      	strb	r3, [r7, #8]
    ADC_InitStruct.ADC_ContinuousConvMode = ENABLE;
 8001668:	2301      	movs	r3, #1
 800166a:	727b      	strb	r3, [r7, #9]
    ADC_InitStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
    ADC_InitStruct.ADC_DataAlign = ADC_DataAlign_Right;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
    ADC_InitStruct.ADC_NbrOfConversion = 1;
 8001674:	2301      	movs	r3, #1
 8001676:	763b      	strb	r3, [r7, #24]
    ADC_Init(ADC2, &ADC_InitStruct);
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	4619      	mov	r1, r3
 800167c:	4816      	ldr	r0, [pc, #88]	; (80016d8 <InitADS1115+0x114>)
 800167e:	f7ff f865 	bl	800074c <ADC_Init>

    /*Enable ADC channels*/
    ADC_RegularChannelConfig(ADC1, ADC_Channel_6, 1, ADC_SampleTime_15Cycles);
 8001682:	2301      	movs	r3, #1
 8001684:	2201      	movs	r2, #1
 8001686:	2106      	movs	r1, #6
 8001688:	4812      	ldr	r0, [pc, #72]	; (80016d4 <InitADS1115+0x110>)
 800168a:	f7ff f8f9 	bl	8000880 <ADC_RegularChannelConfig>
    ADC_RegularChannelConfig(ADC2, ADC_Channel_7, 1, ADC_SampleTime_15Cycles);
 800168e:	2301      	movs	r3, #1
 8001690:	2201      	movs	r2, #1
 8001692:	2107      	movs	r1, #7
 8001694:	4810      	ldr	r0, [pc, #64]	; (80016d8 <InitADS1115+0x114>)
 8001696:	f7ff f8f3 	bl	8000880 <ADC_RegularChannelConfig>

    ADC_Cmd(ADC1, ENABLE);
 800169a:	2101      	movs	r1, #1
 800169c:	480d      	ldr	r0, [pc, #52]	; (80016d4 <InitADS1115+0x110>)
 800169e:	f7ff f8d3 	bl	8000848 <ADC_Cmd>
    ADC_Cmd(ADC2, ENABLE);
 80016a2:	2101      	movs	r1, #1
 80016a4:	480c      	ldr	r0, [pc, #48]	; (80016d8 <InitADS1115+0x114>)
 80016a6:	f7ff f8cf 	bl	8000848 <ADC_Cmd>

    ADC_SoftwareStartConv(ADC1);
 80016aa:	480a      	ldr	r0, [pc, #40]	; (80016d4 <InitADS1115+0x110>)
 80016ac:	f7ff f9b2 	bl	8000a14 <ADC_SoftwareStartConv>
    ADC_SoftwareStartConv(ADC2);
 80016b0:	4809      	ldr	r0, [pc, #36]	; (80016d8 <InitADS1115+0x114>)
 80016b2:	f7ff f9af 	bl	8000a14 <ADC_SoftwareStartConv>
}
 80016b6:	bf00      	nop
 80016b8:	3738      	adds	r7, #56	; 0x38
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	0800371c 	.word	0x0800371c
 80016c4:	00061a80 	.word	0x00061a80
 80016c8:	40005400 	.word	0x40005400
 80016cc:	00400001 	.word	0x00400001
 80016d0:	40020000 	.word	0x40020000
 80016d4:	40012000 	.word	0x40012000
 80016d8:	40012100 	.word	0x40012100

080016dc <getADCData>:
* \version 0.0.1
*
* \date 02.01.2019 Function created
*
*******************************************************************************/
unsigned int getADCData(unsigned char channel){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]

	unsigned char conf[2] = {0x83, 0xE3};
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <getADCData+0x80>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	823b      	strh	r3, [r7, #16]
	unsigned char adc_value[2];
	unsigned char conf_value[2] = {0x00, 0x00};
 80016ec:	2300      	movs	r3, #0
 80016ee:	723b      	strb	r3, [r7, #8]
 80016f0:	2300      	movs	r3, #0
 80016f2:	727b      	strb	r3, [r7, #9]
	unsigned int adc;

	 /*write channel to mux*/
	 if(channel == 0){
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <getADCData+0x22>

		 conf[0] = 0xC3;
 80016fa:	23c3      	movs	r3, #195	; 0xc3
 80016fc:	743b      	strb	r3, [r7, #16]
	 }
	 if(channel == 1){
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d10e      	bne.n	8001722 <getADCData+0x46>

		 conf[0] = 0xD3;
 8001704:	23d3      	movs	r3, #211	; 0xd3
 8001706:	743b      	strb	r3, [r7, #16]
		 while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET){
 8001708:	bf00      	nop
 800170a:	2102      	movs	r1, #2
 800170c:	4814      	ldr	r0, [pc, #80]	; (8001760 <getADCData+0x84>)
 800170e:	f7ff f99e 	bl	8000a4e <ADC_GetFlagStatus>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f8      	beq.n	800170a <getADCData+0x2e>
			 ;
		 }
		 adc = ADC_GetConversionValue(ADC1);
 8001718:	4811      	ldr	r0, [pc, #68]	; (8001760 <getADCData+0x84>)
 800171a:	f7ff f98b 	bl	8000a34 <ADC_GetConversionValue>
 800171e:	4603      	mov	r3, r0
 8001720:	617b      	str	r3, [r7, #20]
	 }
	 if(channel == 2){
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d10e      	bne.n	8001746 <getADCData+0x6a>

		 conf[0] = 0xE3;
 8001728:	23e3      	movs	r3, #227	; 0xe3
 800172a:	743b      	strb	r3, [r7, #16]
		 while(ADC_GetFlagStatus(ADC2, ADC_FLAG_EOC) == RESET){
 800172c:	bf00      	nop
 800172e:	2102      	movs	r1, #2
 8001730:	480c      	ldr	r0, [pc, #48]	; (8001764 <getADCData+0x88>)
 8001732:	f7ff f98c 	bl	8000a4e <ADC_GetFlagStatus>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f8      	beq.n	800172e <getADCData+0x52>
			 ;
		 }
		 adc = ADC_GetConversionValue(ADC2);
 800173c:	4809      	ldr	r0, [pc, #36]	; (8001764 <getADCData+0x88>)
 800173e:	f7ff f979 	bl	8000a34 <ADC_GetConversionValue>
 8001742:	4603      	mov	r3, r0
 8001744:	617b      	str	r3, [r7, #20]
	 }
	 if(channel == 3){
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	2b03      	cmp	r3, #3
 800174a:	d101      	bne.n	8001750 <getADCData+0x74>

		 conf[0] = 0xF3;
 800174c:	23f3      	movs	r3, #243	; 0xf3
 800174e:	743b      	strb	r3, [r7, #16]
//
//	I2C_ReadMulti(I2C1, 0x90, 0x00, adc_value, 2);
//
//	adc = adc_value[0] <<  8 | adc_value[1];

	return adc;
 8001750:	697b      	ldr	r3, [r7, #20]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	0800371c 	.word	0x0800371c
 8001760:	40012000 	.word	0x40012000
 8001764:	40012100 	.word	0x40012100

08001768 <MovingAverage_PushNewValue16b>:
#include "AverageFilter.h"



void MovingAverage_PushNewValue16b(MovingAverage_uint16_t *averageStruct, uint16_t newValue){
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]

	averageStruct->ValueThatGoesIn = newValue;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	887a      	ldrh	r2, [r7, #2]
 8001778:	825a      	strh	r2, [r3, #18]
	averageStruct->ValueThatGoesOut = averageStruct->InputBuffer[averageStruct->ActualIndex];
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7b9b      	ldrb	r3, [r3, #14]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	889a      	ldrh	r2, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	821a      	strh	r2, [r3, #16]
	
	averageStruct->InputBuffer[averageStruct->ActualIndex] = averageStruct->ValueThatGoesIn;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7b9b      	ldrb	r3, [r3, #14]
 800178e:	4618      	mov	r0, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	8a59      	ldrh	r1, [r3, #18]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	0043      	lsls	r3, r0, #1
 8001798:	4413      	add	r3, r2
 800179a:	460a      	mov	r2, r1
 800179c:	809a      	strh	r2, [r3, #4]
	
	if (averageStruct->ActualIndex == (NUMBER_OF_SAMPLES-1)){
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	7b9b      	ldrb	r3, [r3, #14]
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d103      	bne.n	80017ae <MovingAverage_PushNewValue16b+0x46>

		averageStruct->ActualIndex = 0;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	739a      	strb	r2, [r3, #14]
 80017ac:	e005      	b.n	80017ba <MovingAverage_PushNewValue16b+0x52>
	}
	else{

		averageStruct->ActualIndex++;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7b9b      	ldrb	r3, [r3, #14]
 80017b2:	3301      	adds	r3, #1
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	739a      	strb	r2, [r3, #14]
	}
	averageStruct->sum = averageStruct->sum + averageStruct->ValueThatGoesIn - averageStruct->ValueThatGoesOut;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	8a52      	ldrh	r2, [r2, #18]
 80017c2:	4413      	add	r3, r2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	8a12      	ldrh	r2, [r2, #16]
 80017c8:	1a9a      	subs	r2, r3, r2
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	601a      	str	r2, [r3, #0]

	averageStruct->Result = (uint16_t)(averageStruct->sum/NUMBER_OF_SAMPLES);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a06      	ldr	r2, [pc, #24]	; (80017ec <MovingAverage_PushNewValue16b+0x84>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	b29a      	uxth	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	829a      	strh	r2, [r3, #20]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	cccccccd 	.word	0xcccccccd

080017f0 <InitDAC>:
* \version 0.0.1
*
* \date 02.01.2019 Function created
*
*******************************************************************************/
void InitDAC(void) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStructure;
    DAC_InitTypeDef DAC_InitStructure;

    /* DAC Periph clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 80017f6:	2101      	movs	r1, #1
 80017f8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80017fc:	f7ff fc84 	bl	8001108 <RCC_APB1PeriphClockCmd>
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001800:	2101      	movs	r1, #1
 8001802:	2001      	movs	r0, #1
 8001804:	f7ff fc60 	bl	80010c8 <RCC_AHB1PeriphClockCmd>

    /*enable outputs for the DAC*/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 8001808:	2330      	movs	r3, #48	; 0x30
 800180a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 800180c:	2303      	movs	r3, #3
 800180e:	753b      	strb	r3, [r7, #20]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	75fb      	strb	r3, [r7, #23]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	4619      	mov	r1, r3
 800181a:	481a      	ldr	r0, [pc, #104]	; (8001884 <InitDAC+0x94>)
 800181c:	f7ff f9c4 	bl	8000ba8 <GPIO_Init>

    /*enable outputs for H-bridge PA2(red) and PA3(ir)*/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8001820:	230c      	movs	r3, #12
 8001822:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001824:	2301      	movs	r3, #1
 8001826:	753b      	strb	r3, [r7, #20]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001828:	2300      	movs	r3, #0
 800182a:	75bb      	strb	r3, [r7, #22]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	75fb      	strb	r3, [r7, #23]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	4619      	mov	r1, r3
 8001836:	4813      	ldr	r0, [pc, #76]	; (8001884 <InitDAC+0x94>)
 8001838:	f7ff f9b6 	bl	8000ba8 <GPIO_Init>

    GPIO_SetBits(GPIOA, GPIO_Pin_2);
 800183c:	2104      	movs	r1, #4
 800183e:	4811      	ldr	r0, [pc, #68]	; (8001884 <InitDAC+0x94>)
 8001840:	f7ff fa40 	bl	8000cc4 <GPIO_SetBits>
    GPIO_SetBits(GPIOA, GPIO_Pin_3);
 8001844:	2108      	movs	r1, #8
 8001846:	480f      	ldr	r0, [pc, #60]	; (8001884 <InitDAC+0x94>)
 8001848:	f7ff fa3c 	bl	8000cc4 <GPIO_SetBits>

	/* DAC channel 1(red) and 2(ir) Configuration */
	DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 800184c:	2300      	movs	r3, #0
 800184e:	603b      	str	r3, [r7, #0]
	DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8001850:	2300      	movs	r3, #0
 8001852:	607b      	str	r3, [r7, #4]
	DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
	DAC_Init(DAC_Channel_1, &DAC_InitStructure);
 8001858:	463b      	mov	r3, r7
 800185a:	4619      	mov	r1, r3
 800185c:	2000      	movs	r0, #0
 800185e:	f7ff f911 	bl	8000a84 <DAC_Init>
	DAC_Init(DAC_Channel_2, &DAC_InitStructure);
 8001862:	463b      	mov	r3, r7
 8001864:	4619      	mov	r1, r3
 8001866:	2010      	movs	r0, #16
 8001868:	f7ff f90c 	bl	8000a84 <DAC_Init>

	/* Enable DAC Channel 1 and 2 */
	DAC_Cmd(DAC_Channel_1, ENABLE);
 800186c:	2101      	movs	r1, #1
 800186e:	2000      	movs	r0, #0
 8001870:	f7ff f93c 	bl	8000aec <DAC_Cmd>
	DAC_Cmd(DAC_Channel_2, ENABLE);
 8001874:	2101      	movs	r1, #1
 8001876:	2010      	movs	r0, #16
 8001878:	f7ff f938 	bl	8000aec <DAC_Cmd>

}
 800187c:	bf00      	nop
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40020000 	.word	0x40020000

08001888 <SetRedLed>:
* \version 0.0.1
*
* \date 02.01.2019 Function created
*
*******************************************************************************/
void SetRedLed(float current){
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned int i = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]

	/*Switch off ir led*/
	GPIO_SetBits(GPIOA, GPIO_Pin_3);
 8001896:	2108      	movs	r1, #8
 8001898:	481b      	ldr	r0, [pc, #108]	; (8001908 <SetRedLed+0x80>)
 800189a:	f7ff fa13 	bl	8000cc4 <GPIO_SetBits>
	DAC_SetChannel2Data(DAC_Align_12b_R, 0x000);
 800189e:	2100      	movs	r1, #0
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff f965 	bl	8000b70 <DAC_SetChannel2Data>

	/*Break before make*/
	for(i = 0; i < 1000; i++){
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	e002      	b.n	80018b2 <SetRedLed+0x2a>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	3301      	adds	r3, #1
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018b8:	d3f8      	bcc.n	80018ac <SetRedLed+0x24>
		;
	}

	/*Switch on red led*/
	GPIO_ResetBits(GPIOA, GPIO_Pin_2);
 80018ba:	2104      	movs	r1, #4
 80018bc:	4812      	ldr	r0, [pc, #72]	; (8001908 <SetRedLed+0x80>)
 80018be:	f7ff fa10 	bl	8000ce2 <GPIO_ResetBits>

	/*Set current*/
	if(current > 20.0){
 80018c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018c6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80018ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d2:	dd05      	ble.n	80018e0 <SetRedLed+0x58>

		DAC_SetChannel1Data(DAC_Align_12b_R, 0xFFF);
 80018d4:	f640 71ff 	movw	r1, #4095	; 0xfff
 80018d8:	2000      	movs	r0, #0
 80018da:	f7ff f92d 	bl	8000b38 <DAC_SetChannel1Data>
	}
	else{

		DAC_SetChannel1Data(DAC_Align_12b_R, current * 204);
	}
}
 80018de:	e00f      	b.n	8001900 <SetRedLed+0x78>
		DAC_SetChannel1Data(DAC_Align_12b_R, current * 204);
 80018e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80018e4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800190c <SetRedLed+0x84>
 80018e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018f0:	edc7 7a00 	vstr	s15, [r7]
 80018f4:	883b      	ldrh	r3, [r7, #0]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	4619      	mov	r1, r3
 80018fa:	2000      	movs	r0, #0
 80018fc:	f7ff f91c 	bl	8000b38 <DAC_SetChannel1Data>
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40020000 	.word	0x40020000
 800190c:	434c0000 	.word	0x434c0000

08001910 <SetIrLed>:
* \version 0.0.1
*
* \date 02.01.2019 Function created
*
*******************************************************************************/
void SetIrLed(float current){
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned int i = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]

	/*Switch off red led*/
	GPIO_SetBits(GPIOA, GPIO_Pin_2);
 800191e:	2104      	movs	r1, #4
 8001920:	481b      	ldr	r0, [pc, #108]	; (8001990 <SetIrLed+0x80>)
 8001922:	f7ff f9cf 	bl	8000cc4 <GPIO_SetBits>
	DAC_SetChannel1Data(DAC_Align_12b_R, 0x000);
 8001926:	2100      	movs	r1, #0
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff f905 	bl	8000b38 <DAC_SetChannel1Data>

	/*Break before make*/
	for(i = 0; i < 1000; i++){
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	e002      	b.n	800193a <SetIrLed+0x2a>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	3301      	adds	r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001940:	d3f8      	bcc.n	8001934 <SetIrLed+0x24>
		;
	}

	/*Switch on ir led*/
	GPIO_ResetBits(GPIOA, GPIO_Pin_3);
 8001942:	2108      	movs	r1, #8
 8001944:	4812      	ldr	r0, [pc, #72]	; (8001990 <SetIrLed+0x80>)
 8001946:	f7ff f9cc 	bl	8000ce2 <GPIO_ResetBits>

	/*Set current*/
	if(current > 20.0){
 800194a:	edd7 7a01 	vldr	s15, [r7, #4]
 800194e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001952:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195a:	dd05      	ble.n	8001968 <SetIrLed+0x58>

		DAC_SetChannel2Data(DAC_Align_12b_R, 0xFFF);
 800195c:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001960:	2000      	movs	r0, #0
 8001962:	f7ff f905 	bl	8000b70 <DAC_SetChannel2Data>
	}
	else{

		DAC_SetChannel2Data(DAC_Align_12b_R, current * 204);
	}
}
 8001966:	e00f      	b.n	8001988 <SetIrLed+0x78>
		DAC_SetChannel2Data(DAC_Align_12b_R, current * 204);
 8001968:	edd7 7a01 	vldr	s15, [r7, #4]
 800196c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001994 <SetIrLed+0x84>
 8001970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001978:	edc7 7a00 	vstr	s15, [r7]
 800197c:	883b      	ldrh	r3, [r7, #0]
 800197e:	b29b      	uxth	r3, r3
 8001980:	4619      	mov	r1, r3
 8001982:	2000      	movs	r0, #0
 8001984:	f7ff f8f4 	bl	8000b70 <DAC_SetChannel2Data>
}
 8001988:	bf00      	nop
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40020000 	.word	0x40020000
 8001994:	434c0000 	.word	0x434c0000

08001998 <Init_I2C>:
/* Private functions */
static void I2C1_INT_InitPins(I2C_PinsPack_t pinspack);
static void I2C2_INT_InitPins(I2C_PinsPack_t pinspack);
static void I2C3_INT_InitPins(I2C_PinsPack_t pinspack);

void Init_I2C(I2C_TypeDef* I2Cx, I2C_PinsPack_t pinspack, uint32_t clockSpeed) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	460b      	mov	r3, r1
 80019a2:	607a      	str	r2, [r7, #4]
 80019a4:	72fb      	strb	r3, [r7, #11]
	I2C_InitTypeDef I2C_InitStruct;
	
	if (I2Cx == I2C1) {
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4a44      	ldr	r2, [pc, #272]	; (8001abc <Init_I2C+0x124>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d121      	bne.n	80019f2 <Init_I2C+0x5a>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80019ae:	4a44      	ldr	r2, [pc, #272]	; (8001ac0 <Init_I2C+0x128>)
 80019b0:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <Init_I2C+0x128>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Enable pins */
		I2C1_INT_InitPins(pinspack);
 80019ba:	7afb      	ldrb	r3, [r7, #11]
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 f99d 	bl	8001cfc <I2C1_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < I2C_INT_Clocks[0]) {
 80019c2:	4b40      	ldr	r3, [pc, #256]	; (8001ac4 <Init_I2C+0x12c>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d902      	bls.n	80019d2 <Init_I2C+0x3a>
			I2C_INT_Clocks[0] = clockSpeed;
 80019cc:	4a3d      	ldr	r2, [pc, #244]	; (8001ac4 <Init_I2C+0x12c>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6013      	str	r3, [r2, #0]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = I2C_INT_Clocks[0];
 80019d2:	4b3c      	ldr	r3, [pc, #240]	; (8001ac4 <Init_I2C+0x12c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = I2C1_ACKNOWLEDGED_ADDRESS;
 80019d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019dc:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = I2C1_MODE;
 80019de:	2300      	movs	r3, #0
 80019e0:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = I2C1_OWN_ADDRESS;
 80019e2:	2300      	movs	r3, #0
 80019e4:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = I2C1_ACK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = I2C1_DUTY_CYCLE;
 80019ea:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80019ee:	82fb      	strh	r3, [r7, #22]
 80019f0:	e04a      	b.n	8001a88 <Init_I2C+0xf0>
	} else if (I2Cx == I2C2) {
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4a34      	ldr	r2, [pc, #208]	; (8001ac8 <Init_I2C+0x130>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d121      	bne.n	8001a3e <Init_I2C+0xa6>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 80019fa:	4a31      	ldr	r2, [pc, #196]	; (8001ac0 <Init_I2C+0x128>)
 80019fc:	4b30      	ldr	r3, [pc, #192]	; (8001ac0 <Init_I2C+0x128>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a04:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Enable pins */
		I2C2_INT_InitPins(pinspack);
 8001a06:	7afb      	ldrb	r3, [r7, #11]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 f9f1 	bl	8001df0 <I2C2_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < I2C_INT_Clocks[1]) {
 8001a0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <Init_I2C+0x12c>)
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d902      	bls.n	8001a1e <Init_I2C+0x86>
			I2C_INT_Clocks[1] = clockSpeed;
 8001a18:	4a2a      	ldr	r2, [pc, #168]	; (8001ac4 <Init_I2C+0x12c>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6053      	str	r3, [r2, #4]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = I2C_INT_Clocks[1];
 8001a1e:	4b29      	ldr	r3, [pc, #164]	; (8001ac4 <Init_I2C+0x12c>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = I2C2_ACKNOWLEDGED_ADDRESS;
 8001a24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a28:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = I2C2_MODE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = I2C2_OWN_ADDRESS;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = I2C2_ACK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = I2C2_DUTY_CYCLE;
 8001a36:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001a3a:	82fb      	strh	r3, [r7, #22]
 8001a3c:	e024      	b.n	8001a88 <Init_I2C+0xf0>
	} else if (I2Cx == I2C3) {
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4a22      	ldr	r2, [pc, #136]	; (8001acc <Init_I2C+0x134>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d120      	bne.n	8001a88 <Init_I2C+0xf0>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8001a46:	4a1e      	ldr	r2, [pc, #120]	; (8001ac0 <Init_I2C+0x128>)
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <Init_I2C+0x128>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a50:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Enable pins */
		I2C3_INT_InitPins(pinspack);
 8001a52:	7afb      	ldrb	r3, [r7, #11]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 fa47 	bl	8001ee8 <I2C3_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < I2C_INT_Clocks[2]) {
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <Init_I2C+0x12c>)
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d902      	bls.n	8001a6a <Init_I2C+0xd2>
			I2C_INT_Clocks[2] = clockSpeed;
 8001a64:	4a17      	ldr	r2, [pc, #92]	; (8001ac4 <Init_I2C+0x12c>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6093      	str	r3, [r2, #8]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = I2C_INT_Clocks[2];
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <Init_I2C+0x12c>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = I2C3_ACKNOWLEDGED_ADDRESS;
 8001a70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a74:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = I2C3_MODE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = I2C3_OWN_ADDRESS;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = I2C3_ACK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = I2C3_DUTY_CYCLE;
 8001a82:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001a86:	82fb      	strh	r3, [r7, #22]
	}
	

	/* Disable I2C first */
	I2Cx->CR1 &= ~I2C_CR1_PE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	f023 0301 	bic.w	r3, r3, #1
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	801a      	strh	r2, [r3, #0]
	
	/* Initialize I2C */
	I2C_Init(I2Cx, &I2C_InitStruct);
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f7ff f978 	bl	8000d94 <I2C_Init>
	
	/* Enable I2C */
	I2Cx->CR1 |= I2C_CR1_PE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	801a      	strh	r2, [r3, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	3720      	adds	r7, #32
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40005400 	.word	0x40005400
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	20000010 	.word	0x20000010
 8001ac8:	40005800 	.word	0x40005800
 8001acc:	40005c00 	.word	0x40005c00

08001ad0 <I2C_WriteMulti>:
	I2C_WriteData(I2Cx, reg);
	I2C_WriteData(I2Cx, data);
	I2C_Stop(I2Cx);
}

void I2C_WriteMulti(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	460b      	mov	r3, r1
 8001adc:	72fb      	strb	r3, [r7, #11]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	72bb      	strb	r3, [r7, #10]
	I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 8001ae2:	7af9      	ldrb	r1, [r7, #11]
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 f827 	bl	8001b3c <I2C_Start>
	I2C_WriteData(I2Cx, reg);
 8001aee:	7abb      	ldrb	r3, [r7, #10]
 8001af0:	4619      	mov	r1, r3
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 f8a6 	bl	8001c44 <I2C_WriteData>
	while (count--) {
 8001af8:	e007      	b.n	8001b0a <I2C_WriteMulti+0x3a>
		I2C_WriteData(I2Cx, *data++);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	4619      	mov	r1, r3
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 f89d 	bl	8001c44 <I2C_WriteData>
	while (count--) {
 8001b0a:	8b3b      	ldrh	r3, [r7, #24]
 8001b0c:	1e5a      	subs	r2, r3, #1
 8001b0e:	833a      	strh	r2, [r7, #24]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f2      	bne.n	8001afa <I2C_WriteMulti+0x2a>
	}
	I2C_Stop(I2Cx);
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 f8bd 	bl	8001c94 <I2C_Stop>
}
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <I2C_InitCustomPinsCallback>:
	
	/* Return status */
	return connected;
}

void I2C_InitCustomPinsCallback(I2C_TypeDef* I2Cx, uint16_t AlternateFunction) {
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <I2C_Start>:

/* Private functions */
int16_t I2C_Start(I2C_TypeDef* I2Cx, uint8_t address, uint8_t direction, uint8_t ack) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	4608      	mov	r0, r1
 8001b46:	4611      	mov	r1, r2
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	70fb      	strb	r3, [r7, #3]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	70bb      	strb	r3, [r7, #2]
 8001b52:	4613      	mov	r3, r2
 8001b54:	707b      	strb	r3, [r7, #1]
	/* Generate I2C start pulse */
	I2Cx->CR1 |= I2C_CR1_START;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	801a      	strh	r2, [r3, #0]
	
	/* Wait till I2C is busy */
	I2C_Timeout = I2C_TIMEOUT;
 8001b66:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <I2C_Start+0x100>)
 8001b68:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b6c:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 8001b6e:	e00a      	b.n	8001b86 <I2C_Start+0x4a>
		if (--I2C_Timeout == 0x00) {
 8001b70:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <I2C_Start+0x100>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	4a31      	ldr	r2, [pc, #196]	; (8001c3c <I2C_Start+0x100>)
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <I2C_Start+0x100>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <I2C_Start+0x4a>
			return 1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e056      	b.n	8001c34 <I2C_Start+0xf8>
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	8a9b      	ldrh	r3, [r3, #20]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0ed      	beq.n	8001b70 <I2C_Start+0x34>
		}
	}

	/* Enable ack if we select it */
	if (ack) {
 8001b94:	787b      	ldrb	r3, [r7, #1]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d007      	beq.n	8001baa <I2C_Start+0x6e>
		I2Cx->CR1 |= I2C_CR1_ACK;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	801a      	strh	r2, [r3, #0]
	}

	/* Send write/read bit */
	if (direction == I2C_TRANSMITTER_MODE) {
 8001baa:	78bb      	ldrb	r3, [r7, #2]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d11d      	bne.n	8001bec <I2C_Start+0xb0>
		/* Send address with zero last bit */
		I2Cx->DR = address & ~I2C_OAR1_ADD0;
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	f023 0301 	bic.w	r3, r3, #1
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	821a      	strh	r2, [r3, #16]
		
		/* Wait till finished */
		I2C_Timeout = I2C_TIMEOUT;
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <I2C_Start+0x100>)
 8001bc0:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001bc4:	601a      	str	r2, [r3, #0]
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8001bc6:	e00a      	b.n	8001bde <I2C_Start+0xa2>
			if (--I2C_Timeout == 0x00) {
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <I2C_Start+0x100>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	4a1b      	ldr	r2, [pc, #108]	; (8001c3c <I2C_Start+0x100>)
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <I2C_Start+0x100>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <I2C_Start+0xa2>
				return 1;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e02a      	b.n	8001c34 <I2C_Start+0xf8>
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	8a9b      	ldrh	r3, [r3, #20]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0ed      	beq.n	8001bc8 <I2C_Start+0x8c>
			}
		}
	}
	if (direction == I2C_RECEIVER_MODE) {
 8001bec:	78bb      	ldrb	r3, [r7, #2]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d11d      	bne.n	8001c2e <I2C_Start+0xf2>
		/* Send address with 1 last bit */
		I2Cx->DR = address | I2C_OAR1_ADD0;
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	821a      	strh	r2, [r3, #16]
		
		/* Wait till finished */
		I2C_Timeout = I2C_TIMEOUT;
 8001c00:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <I2C_Start+0x100>)
 8001c02:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001c06:	601a      	str	r2, [r3, #0]
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) {
 8001c08:	e00a      	b.n	8001c20 <I2C_Start+0xe4>
			if (--I2C_Timeout == 0x00) {
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <I2C_Start+0x100>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <I2C_Start+0x100>)
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <I2C_Start+0x100>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <I2C_Start+0xe4>
				return 1;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e009      	b.n	8001c34 <I2C_Start+0xf8>
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) {
 8001c20:	4907      	ldr	r1, [pc, #28]	; (8001c40 <I2C_Start+0x104>)
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff f978 	bl	8000f18 <I2C_CheckEvent>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0ed      	beq.n	8001c0a <I2C_Start+0xce>
			}
		}
	}
	
	/* Read status register to clear ADDR flag */
	I2Cx->SR2;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	8b1b      	ldrh	r3, [r3, #24]
	
	/* Return 0, everything ok */
	return 0;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000038 	.word	0x20000038
 8001c40:	00030002 	.word	0x00030002

08001c44 <I2C_WriteData>:

void I2C_WriteData(I2C_TypeDef* I2Cx, uint8_t data) {
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	70fb      	strb	r3, [r7, #3]
	/* Wait till I2C is not busy anymore */
	I2C_Timeout = I2C_TIMEOUT;
 8001c50:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <I2C_WriteData+0x4c>)
 8001c52:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001c56:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && I2C_Timeout) {
 8001c58:	e004      	b.n	8001c64 <I2C_WriteData+0x20>
		I2C_Timeout--;
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <I2C_WriteData+0x4c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <I2C_WriteData+0x4c>)
 8001c62:	6013      	str	r3, [r2, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && I2C_Timeout) {
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	8a9b      	ldrh	r3, [r3, #20]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d103      	bne.n	8001c7a <I2C_WriteData+0x36>
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <I2C_WriteData+0x4c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1ef      	bne.n	8001c5a <I2C_WriteData+0x16>
	}
	
	/* Send I2C data */
	I2Cx->DR = data;
 8001c7a:	78fb      	ldrb	r3, [r7, #3]
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	821a      	strh	r2, [r3, #16]
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000038 	.word	0x20000038

08001c94 <I2C_Stop>:
	
	/* Return data */
	return data;
}

uint8_t I2C_Stop(I2C_TypeDef* I2Cx) {
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	/* Wait till transmitter not empty */
	I2C_Timeout = I2C_TIMEOUT;
 8001c9c:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <I2C_Stop+0x64>)
 8001c9e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001ca2:	601a      	str	r2, [r3, #0]
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8001ca4:	e00a      	b.n	8001cbc <I2C_Stop+0x28>
		if (--I2C_Timeout == 0x00) {
 8001ca6:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <I2C_Stop+0x64>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <I2C_Stop+0x64>)
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <I2C_Stop+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <I2C_Stop+0x28>
			return 1;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e016      	b.n	8001cea <I2C_Stop+0x56>
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	8a9b      	ldrh	r3, [r3, #20]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0ed      	beq.n	8001ca6 <I2C_Stop+0x12>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	8a9b      	ldrh	r3, [r3, #20]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0e6      	beq.n	8001ca6 <I2C_Stop+0x12>
		}
	}
	
	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	801a      	strh	r2, [r3, #0]
	
	/* Return 0, everything ok */
	return 0;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000038 	.word	0x20000038

08001cfc <I2C1_INT_InitPins>:




/* Private functions */
static void I2C1_INT_InitPins(I2C_PinsPack_t pinspack) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
	GPIO_InitTypeDef GPIO_InitStruct;

#if defined(GPIOB)
	if (pinspack == I2C_PinsPack_1) {
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d11d      	bne.n	8001d48 <I2C1_INT_InitPins+0x4c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	2002      	movs	r0, #2
 8001d10:	f7ff f9da 	bl	80010c8 <RCC_AHB1PeriphClockCmd>
		GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8001d14:	23c0      	movs	r3, #192	; 0xc0
 8001d16:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	733b      	strb	r3, [r7, #12]
		GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73bb      	strb	r3, [r7, #14]
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_25MHz;
 8001d20:	2301      	movs	r3, #1
 8001d22:	737b      	strb	r3, [r7, #13]
		GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001d24:	2301      	movs	r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
		GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d28:	f107 0308 	add.w	r3, r7, #8
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	482e      	ldr	r0, [pc, #184]	; (8001de8 <I2C1_INT_InitPins+0xec>)
 8001d30:	f7fe ff3a 	bl	8000ba8 <GPIO_Init>
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
 8001d34:	2204      	movs	r2, #4
 8001d36:	2106      	movs	r1, #6
 8001d38:	482b      	ldr	r0, [pc, #172]	; (8001de8 <I2C1_INT_InitPins+0xec>)
 8001d3a:	f7fe ffe1 	bl	8000d00 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_I2C1);
 8001d3e:	2204      	movs	r2, #4
 8001d40:	2107      	movs	r1, #7
 8001d42:	4829      	ldr	r0, [pc, #164]	; (8001de8 <I2C1_INT_InitPins+0xec>)
 8001d44:	f7fe ffdc 	bl	8000d00 <GPIO_PinAFConfig>
	}
#endif
#if defined(GPIOB)
	if (pinspack == I2C_PinsPack_2) {
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d11e      	bne.n	8001d8c <I2C1_INT_InitPins+0x90>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001d4e:	2101      	movs	r1, #1
 8001d50:	2002      	movs	r0, #2
 8001d52:	f7ff f9b9 	bl	80010c8 <RCC_AHB1PeriphClockCmd>
		GPIO_InitStruct.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 8001d56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d5a:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	733b      	strb	r3, [r7, #12]
		GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8001d60:	2301      	movs	r3, #1
 8001d62:	73bb      	strb	r3, [r7, #14]
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_25MHz;
 8001d64:	2301      	movs	r3, #1
 8001d66:	737b      	strb	r3, [r7, #13]
		GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
		GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6c:	f107 0308 	add.w	r3, r7, #8
 8001d70:	4619      	mov	r1, r3
 8001d72:	481d      	ldr	r0, [pc, #116]	; (8001de8 <I2C1_INT_InitPins+0xec>)
 8001d74:	f7fe ff18 	bl	8000ba8 <GPIO_Init>
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_I2C1);
 8001d78:	2204      	movs	r2, #4
 8001d7a:	2108      	movs	r1, #8
 8001d7c:	481a      	ldr	r0, [pc, #104]	; (8001de8 <I2C1_INT_InitPins+0xec>)
 8001d7e:	f7fe ffbf 	bl	8000d00 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
 8001d82:	2204      	movs	r2, #4
 8001d84:	2109      	movs	r1, #9
 8001d86:	4818      	ldr	r0, [pc, #96]	; (8001de8 <I2C1_INT_InitPins+0xec>)
 8001d88:	f7fe ffba 	bl	8000d00 <GPIO_PinAFConfig>
	}
#endif
#if defined(GPIOB)
	if (pinspack == I2C_PinsPack_3) {
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d11e      	bne.n	8001dd0 <I2C1_INT_InitPins+0xd4>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001d92:	2101      	movs	r1, #1
 8001d94:	2002      	movs	r0, #2
 8001d96:	f7ff f997 	bl	80010c8 <RCC_AHB1PeriphClockCmd>
		GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
 8001d9a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001d9e:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001da0:	2302      	movs	r3, #2
 8001da2:	733b      	strb	r3, [r7, #12]
		GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73bb      	strb	r3, [r7, #14]
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_25MHz;
 8001da8:	2301      	movs	r3, #1
 8001daa:	737b      	strb	r3, [r7, #13]
		GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
		GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db0:	f107 0308 	add.w	r3, r7, #8
 8001db4:	4619      	mov	r1, r3
 8001db6:	480c      	ldr	r0, [pc, #48]	; (8001de8 <I2C1_INT_InitPins+0xec>)
 8001db8:	f7fe fef6 	bl	8000ba8 <GPIO_Init>
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	2106      	movs	r1, #6
 8001dc0:	4809      	ldr	r0, [pc, #36]	; (8001de8 <I2C1_INT_InitPins+0xec>)
 8001dc2:	f7fe ff9d 	bl	8000d00 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
 8001dc6:	2204      	movs	r2, #4
 8001dc8:	2109      	movs	r1, #9
 8001dca:	4807      	ldr	r0, [pc, #28]	; (8001de8 <I2C1_INT_InitPins+0xec>)
 8001dcc:	f7fe ff98 	bl	8000d00 <GPIO_PinAFConfig>
	}
#endif
	if (pinspack == I2C_PinsPack_Custom) {
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d103      	bne.n	8001dde <I2C1_INT_InitPins+0xe2>
		/* Init custom pins, callback function */
		I2C_InitCustomPinsCallback(I2C1, GPIO_AF_I2C1);
 8001dd6:	2104      	movs	r1, #4
 8001dd8:	4804      	ldr	r0, [pc, #16]	; (8001dec <I2C1_INT_InitPins+0xf0>)
 8001dda:	f7ff fea2 	bl	8001b22 <I2C_InitCustomPinsCallback>
	}
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40020400 	.word	0x40020400
 8001dec:	40005400 	.word	0x40005400

08001df0 <I2C2_INT_InitPins>:

static void I2C2_INT_InitPins(I2C_PinsPack_t pinspack) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
	GPIO_InitTypeDef GPIO_InitStruct;

#if defined(GPIOB)
	if (pinspack == I2C_PinsPack_1) {
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d11e      	bne.n	8001e3e <I2C2_INT_InitPins+0x4e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001e00:	2101      	movs	r1, #1
 8001e02:	2002      	movs	r0, #2
 8001e04:	f7ff f960 	bl	80010c8 <RCC_AHB1PeriphClockCmd>
		GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
 8001e08:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e0c:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	733b      	strb	r3, [r7, #12]
		GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8001e12:	2301      	movs	r3, #1
 8001e14:	73bb      	strb	r3, [r7, #14]
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_25MHz;
 8001e16:	2301      	movs	r3, #1
 8001e18:	737b      	strb	r3, [r7, #13]
		GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	73fb      	strb	r3, [r7, #15]
		GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1e:	f107 0308 	add.w	r3, r7, #8
 8001e22:	4619      	mov	r1, r3
 8001e24:	482c      	ldr	r0, [pc, #176]	; (8001ed8 <I2C2_INT_InitPins+0xe8>)
 8001e26:	f7fe febf 	bl	8000ba8 <GPIO_Init>
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_I2C2);
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	210a      	movs	r1, #10
 8001e2e:	482a      	ldr	r0, [pc, #168]	; (8001ed8 <I2C2_INT_InitPins+0xe8>)
 8001e30:	f7fe ff66 	bl	8000d00 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_I2C2);
 8001e34:	2204      	movs	r2, #4
 8001e36:	210b      	movs	r1, #11
 8001e38:	4827      	ldr	r0, [pc, #156]	; (8001ed8 <I2C2_INT_InitPins+0xe8>)
 8001e3a:	f7fe ff61 	bl	8000d00 <GPIO_PinAFConfig>
	}
#endif
#if defined(GPIOF)
	if (pinspack == I2C_PinsPack_2) {
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d11d      	bne.n	8001e80 <I2C2_INT_InitPins+0x90>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8001e44:	2101      	movs	r1, #1
 8001e46:	2020      	movs	r0, #32
 8001e48:	f7ff f93e 	bl	80010c8 <RCC_AHB1PeriphClockCmd>
		GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001e50:	2302      	movs	r3, #2
 8001e52:	733b      	strb	r3, [r7, #12]
		GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73bb      	strb	r3, [r7, #14]
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_25MHz;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	737b      	strb	r3, [r7, #13]
		GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
		GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e60:	f107 0308 	add.w	r3, r7, #8
 8001e64:	4619      	mov	r1, r3
 8001e66:	481d      	ldr	r0, [pc, #116]	; (8001edc <I2C2_INT_InitPins+0xec>)
 8001e68:	f7fe fe9e 	bl	8000ba8 <GPIO_Init>
		GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_I2C2);
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	210a      	movs	r1, #10
 8001e70:	481a      	ldr	r0, [pc, #104]	; (8001edc <I2C2_INT_InitPins+0xec>)
 8001e72:	f7fe ff45 	bl	8000d00 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOF, GPIO_PinSource11, GPIO_AF_I2C2);
 8001e76:	2204      	movs	r2, #4
 8001e78:	210b      	movs	r1, #11
 8001e7a:	4818      	ldr	r0, [pc, #96]	; (8001edc <I2C2_INT_InitPins+0xec>)
 8001e7c:	f7fe ff40 	bl	8000d00 <GPIO_PinAFConfig>
	}
#endif
#if defined(GPIOH)
	if (pinspack == I2C_PinsPack_3) {
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d11d      	bne.n	8001ec2 <I2C2_INT_InitPins+0xd2>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8001e86:	2101      	movs	r1, #1
 8001e88:	2080      	movs	r0, #128	; 0x80
 8001e8a:	f7ff f91d 	bl	80010c8 <RCC_AHB1PeriphClockCmd>
		GPIO_InitStruct.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 8001e8e:	2330      	movs	r3, #48	; 0x30
 8001e90:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001e92:	2302      	movs	r3, #2
 8001e94:	733b      	strb	r3, [r7, #12]
		GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8001e96:	2301      	movs	r3, #1
 8001e98:	73bb      	strb	r3, [r7, #14]
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_25MHz;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	737b      	strb	r3, [r7, #13]
		GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	73fb      	strb	r3, [r7, #15]
		GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ea2:	f107 0308 	add.w	r3, r7, #8
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	480d      	ldr	r0, [pc, #52]	; (8001ee0 <I2C2_INT_InitPins+0xf0>)
 8001eaa:	f7fe fe7d 	bl	8000ba8 <GPIO_Init>
		GPIO_PinAFConfig(GPIOH, GPIO_PinSource10, GPIO_AF_I2C2);
 8001eae:	2204      	movs	r2, #4
 8001eb0:	210a      	movs	r1, #10
 8001eb2:	480b      	ldr	r0, [pc, #44]	; (8001ee0 <I2C2_INT_InitPins+0xf0>)
 8001eb4:	f7fe ff24 	bl	8000d00 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOH, GPIO_PinSource11, GPIO_AF_I2C2);
 8001eb8:	2204      	movs	r2, #4
 8001eba:	210b      	movs	r1, #11
 8001ebc:	4808      	ldr	r0, [pc, #32]	; (8001ee0 <I2C2_INT_InitPins+0xf0>)
 8001ebe:	f7fe ff1f 	bl	8000d00 <GPIO_PinAFConfig>
	}
#endif
	if (pinspack == I2C_PinsPack_Custom) {
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d103      	bne.n	8001ed0 <I2C2_INT_InitPins+0xe0>
		/* Init custom pins, callback function */
		I2C_InitCustomPinsCallback(I2C2, GPIO_AF_I2C2);
 8001ec8:	2104      	movs	r1, #4
 8001eca:	4806      	ldr	r0, [pc, #24]	; (8001ee4 <I2C2_INT_InitPins+0xf4>)
 8001ecc:	f7ff fe29 	bl	8001b22 <I2C_InitCustomPinsCallback>
	}
}
 8001ed0:	bf00      	nop
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40020400 	.word	0x40020400
 8001edc:	40021400 	.word	0x40021400
 8001ee0:	40021c00 	.word	0x40021c00
 8001ee4:	40005800 	.word	0x40005800

08001ee8 <I2C3_INT_InitPins>:

static void I2C3_INT_InitPins(I2C_PinsPack_t pinspack) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
	GPIO_InitTypeDef GPIO_InitStruct;

#if defined(GPIOA) && defined(GPIOC)
	if (pinspack == I2C_PinsPack_1) {
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d127      	bne.n	8001f48 <I2C3_INT_InitPins+0x60>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOC, ENABLE);
 8001ef8:	2101      	movs	r1, #1
 8001efa:	2005      	movs	r0, #5
 8001efc:	f7ff f8e4 	bl	80010c8 <RCC_AHB1PeriphClockCmd>
		GPIO_InitStruct.GPIO_Pin = GPIO_Pin_8;
 8001f00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f04:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001f06:	2302      	movs	r3, #2
 8001f08:	733b      	strb	r3, [r7, #12]
		GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	73bb      	strb	r3, [r7, #14]
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_25MHz;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	737b      	strb	r3, [r7, #13]
		GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001f12:	2301      	movs	r3, #1
 8001f14:	73fb      	strb	r3, [r7, #15]
		GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f16:	f107 0308 	add.w	r3, r7, #8
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4821      	ldr	r0, [pc, #132]	; (8001fa4 <I2C3_INT_InitPins+0xbc>)
 8001f1e:	f7fe fe43 	bl	8000ba8 <GPIO_Init>
		GPIO_PinAFConfig(GPIOA, GPIO_PinSource8, GPIO_AF_I2C3);
 8001f22:	2204      	movs	r2, #4
 8001f24:	2108      	movs	r1, #8
 8001f26:	481f      	ldr	r0, [pc, #124]	; (8001fa4 <I2C3_INT_InitPins+0xbc>)
 8001f28:	f7fe feea 	bl	8000d00 <GPIO_PinAFConfig>
		GPIO_InitStruct.GPIO_Pin = GPIO_Pin_9;
 8001f2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f30:	60bb      	str	r3, [r7, #8]
		GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f32:	f107 0308 	add.w	r3, r7, #8
 8001f36:	4619      	mov	r1, r3
 8001f38:	481b      	ldr	r0, [pc, #108]	; (8001fa8 <I2C3_INT_InitPins+0xc0>)
 8001f3a:	f7fe fe35 	bl	8000ba8 <GPIO_Init>
		GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_I2C3);
 8001f3e:	2204      	movs	r2, #4
 8001f40:	2109      	movs	r1, #9
 8001f42:	4819      	ldr	r0, [pc, #100]	; (8001fa8 <I2C3_INT_InitPins+0xc0>)
 8001f44:	f7fe fedc 	bl	8000d00 <GPIO_PinAFConfig>
	}
#endif
#if defined(GPIOH)
	if (pinspack == I2C_PinsPack_2) {
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d11e      	bne.n	8001f8c <I2C3_INT_InitPins+0xa4>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8001f4e:	2101      	movs	r1, #1
 8001f50:	2080      	movs	r0, #128	; 0x80
 8001f52:	f7ff f8b9 	bl	80010c8 <RCC_AHB1PeriphClockCmd>
		GPIO_InitStruct.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8;
 8001f56:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f5a:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	733b      	strb	r3, [r7, #12]
		GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8001f60:	2301      	movs	r3, #1
 8001f62:	73bb      	strb	r3, [r7, #14]
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_25MHz;
 8001f64:	2301      	movs	r3, #1
 8001f66:	737b      	strb	r3, [r7, #13]
		GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
		GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f6c:	f107 0308 	add.w	r3, r7, #8
 8001f70:	4619      	mov	r1, r3
 8001f72:	480e      	ldr	r0, [pc, #56]	; (8001fac <I2C3_INT_InitPins+0xc4>)
 8001f74:	f7fe fe18 	bl	8000ba8 <GPIO_Init>
		GPIO_PinAFConfig(GPIOH, GPIO_PinSource10, GPIO_AF_I2C3);
 8001f78:	2204      	movs	r2, #4
 8001f7a:	210a      	movs	r1, #10
 8001f7c:	480b      	ldr	r0, [pc, #44]	; (8001fac <I2C3_INT_InitPins+0xc4>)
 8001f7e:	f7fe febf 	bl	8000d00 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOH, GPIO_PinSource11, GPIO_AF_I2C3);
 8001f82:	2204      	movs	r2, #4
 8001f84:	210b      	movs	r1, #11
 8001f86:	4809      	ldr	r0, [pc, #36]	; (8001fac <I2C3_INT_InitPins+0xc4>)
 8001f88:	f7fe feba 	bl	8000d00 <GPIO_PinAFConfig>
	}
#endif
	if (pinspack == I2C_PinsPack_Custom) {
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d103      	bne.n	8001f9a <I2C3_INT_InitPins+0xb2>
		/* Init custom pins, callback function */
		I2C_InitCustomPinsCallback(I2C3, GPIO_AF_I2C3);
 8001f92:	2104      	movs	r1, #4
 8001f94:	4806      	ldr	r0, [pc, #24]	; (8001fb0 <I2C3_INT_InitPins+0xc8>)
 8001f96:	f7ff fdc4 	bl	8001b22 <I2C_InitCustomPinsCallback>
	}
}
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40020000 	.word	0x40020000
 8001fa8:	40020800 	.word	0x40020800
 8001fac:	40021c00 	.word	0x40021c00
 8001fb0:	40005c00 	.word	0x40005c00

08001fb4 <SPO2Measuring>:

/******************************************************************************
*                              State Measuring
******************************************************************************/

void SPO2Measuring(void){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
		8. read Red signal
		9. turn off Red LED (both LEDs off)
		10. wait
	*/
	
	uint16_t elapsedTimeCopy = ElapsedTimeIn_us;
 8001fba:	4b93      	ldr	r3, [pc, #588]	; (8002208 <SPO2Measuring+0x254>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	80fb      	strh	r3, [r7, #6]

	switch (SpO2ActualSubStateSubState){
 8001fc0:	4b92      	ldr	r3, [pc, #584]	; (800220c <SPO2Measuring+0x258>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	f200 811b 	bhi.w	8002200 <SPO2Measuring+0x24c>
 8001fca:	a201      	add	r2, pc, #4	; (adr r2, 8001fd0 <SPO2Measuring+0x1c>)
 8001fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd0:	08001fe5 	.word	0x08001fe5
 8001fd4:	08002007 	.word	0x08002007
 8001fd8:	0800205b 	.word	0x0800205b
 8001fdc:	0800208d 	.word	0x0800208d
 8001fe0:	080020e1 	.word	0x080020e1
		case 0:		
			SetIrLed(CurrentIRValue);	//start pwm with IR value
 8001fe4:	4b8a      	ldr	r3, [pc, #552]	; (8002210 <SPO2Measuring+0x25c>)
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	ee07 3a90 	vmov	s15, r3
 8001fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff4:	f7ff fc8c 	bl	8001910 <SetIrLed>
			
			SpO2ActualSubStateSubState++;
 8001ff8:	4b84      	ldr	r3, [pc, #528]	; (800220c <SPO2Measuring+0x258>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	4b82      	ldr	r3, [pc, #520]	; (800220c <SPO2Measuring+0x258>)
 8002002:	701a      	strb	r2, [r3, #0]
			break;
 8002004:	e0fc      	b.n	8002200 <SPO2Measuring+0x24c>
			
		case 1:
			if (elapsedTimeCopy >= IR_ON_TIME_us){
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	2b31      	cmp	r3, #49	; 0x31
 800200a:	f240 80f2 	bls.w	80021f2 <SPO2Measuring+0x23e>

				ElapsedTimeIn_us = 0;
 800200e:	4b7e      	ldr	r3, [pc, #504]	; (8002208 <SPO2Measuring+0x254>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]

				poxOutputSignalRaw =   getADCData(2);	//read IR baseline and IR signal
 8002014:	2002      	movs	r0, #2
 8002016:	f7ff fb61 	bl	80016dc <getADCData>
 800201a:	4603      	mov	r3, r0
 800201c:	80bb      	strh	r3, [r7, #4]
				SpO2BaselineSignalRaw = getADCData(1);
 800201e:	2001      	movs	r0, #1
 8002020:	f7ff fb5c 	bl	80016dc <getADCData>
 8002024:	4603      	mov	r3, r0
 8002026:	807b      	strh	r3, [r7, #2]


				MovingAverage_PushNewValue16b(&SpO2IRBaselineSignal, SpO2BaselineSignalRaw);	//store IR baseline and IR signal
 8002028:	887b      	ldrh	r3, [r7, #2]
 800202a:	4619      	mov	r1, r3
 800202c:	4879      	ldr	r0, [pc, #484]	; (8002214 <SPO2Measuring+0x260>)
 800202e:	f7ff fb9b 	bl	8001768 <MovingAverage_PushNewValue16b>
				MovingAverage_PushNewValue16b(&SpO2IRLedSignal, poxOutputSignalRaw);
 8002032:	88bb      	ldrh	r3, [r7, #4]
 8002034:	4619      	mov	r1, r3
 8002036:	4878      	ldr	r0, [pc, #480]	; (8002218 <SPO2Measuring+0x264>)
 8002038:	f7ff fb96 	bl	8001768 <MovingAverage_PushNewValue16b>
				
				SetRedLed(0);
 800203c:	ed9f 0a77 	vldr	s0, [pc, #476]	; 800221c <SPO2Measuring+0x268>
 8002040:	f7ff fc22 	bl	8001888 <SetRedLed>
				SetIrLed(0);
 8002044:	ed9f 0a75 	vldr	s0, [pc, #468]	; 800221c <SPO2Measuring+0x268>
 8002048:	f7ff fc62 	bl	8001910 <SetIrLed>
				SpO2ActualSubStateSubState++;
 800204c:	4b6f      	ldr	r3, [pc, #444]	; (800220c <SPO2Measuring+0x258>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	3301      	adds	r3, #1
 8002052:	b2da      	uxtb	r2, r3
 8002054:	4b6d      	ldr	r3, [pc, #436]	; (800220c <SPO2Measuring+0x258>)
 8002056:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002058:	e0cb      	b.n	80021f2 <SPO2Measuring+0x23e>
	
		case 2:
			if (elapsedTimeCopy >= IR_OFF_TIME_us){
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8002060:	f0c0 80c9 	bcc.w	80021f6 <SPO2Measuring+0x242>

				ElapsedTimeIn_us = 0;
 8002064:	4b68      	ldr	r3, [pc, #416]	; (8002208 <SPO2Measuring+0x254>)
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]

				SetRedLed(CurrentRedValue);	//start pwm for Red LED
 800206a:	4b6d      	ldr	r3, [pc, #436]	; (8002220 <SPO2Measuring+0x26c>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002076:	eeb0 0a67 	vmov.f32	s0, s15
 800207a:	f7ff fc05 	bl	8001888 <SetRedLed>
				SpO2ActualSubStateSubState++;					
 800207e:	4b63      	ldr	r3, [pc, #396]	; (800220c <SPO2Measuring+0x258>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	3301      	adds	r3, #1
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4b61      	ldr	r3, [pc, #388]	; (800220c <SPO2Measuring+0x258>)
 8002088:	701a      	strb	r2, [r3, #0]
			}
			break;
 800208a:	e0b4      	b.n	80021f6 <SPO2Measuring+0x242>
			
		case 3:
			if (elapsedTimeCopy >= RED_ON_TIME_us){
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	2b31      	cmp	r3, #49	; 0x31
 8002090:	f240 80b3 	bls.w	80021fa <SPO2Measuring+0x246>

				ElapsedTimeIn_us = 0;
 8002094:	4b5c      	ldr	r3, [pc, #368]	; (8002208 <SPO2Measuring+0x254>)
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]

				poxOutputSignalRaw = getADCData(2);	//Read RED signal
 800209a:	2002      	movs	r0, #2
 800209c:	f7ff fb1e 	bl	80016dc <getADCData>
 80020a0:	4603      	mov	r3, r0
 80020a2:	80bb      	strh	r3, [r7, #4]
				SpO2BaselineSignalRaw = getADCData(1);	//Read RED baseline
 80020a4:	2001      	movs	r0, #1
 80020a6:	f7ff fb19 	bl	80016dc <getADCData>
 80020aa:	4603      	mov	r3, r0
 80020ac:	807b      	strh	r3, [r7, #2]

				MovingAverage_PushNewValue16b(&SpO2RedBaselineSignal, SpO2BaselineSignalRaw);	//store Red baseline and red signal
 80020ae:	887b      	ldrh	r3, [r7, #2]
 80020b0:	4619      	mov	r1, r3
 80020b2:	485c      	ldr	r0, [pc, #368]	; (8002224 <SPO2Measuring+0x270>)
 80020b4:	f7ff fb58 	bl	8001768 <MovingAverage_PushNewValue16b>
				MovingAverage_PushNewValue16b(&SpO2RedLedSignal, poxOutputSignalRaw);
 80020b8:	88bb      	ldrh	r3, [r7, #4]
 80020ba:	4619      	mov	r1, r3
 80020bc:	485a      	ldr	r0, [pc, #360]	; (8002228 <SPO2Measuring+0x274>)
 80020be:	f7ff fb53 	bl	8001768 <MovingAverage_PushNewValue16b>

				SetRedLed(0);
 80020c2:	ed9f 0a56 	vldr	s0, [pc, #344]	; 800221c <SPO2Measuring+0x268>
 80020c6:	f7ff fbdf 	bl	8001888 <SetRedLed>
				SetIrLed(0);
 80020ca:	ed9f 0a54 	vldr	s0, [pc, #336]	; 800221c <SPO2Measuring+0x268>
 80020ce:	f7ff fc1f 	bl	8001910 <SetIrLed>
		
				SpO2ActualSubStateSubState++;
 80020d2:	4b4e      	ldr	r3, [pc, #312]	; (800220c <SPO2Measuring+0x258>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	3301      	adds	r3, #1
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4b4c      	ldr	r3, [pc, #304]	; (800220c <SPO2Measuring+0x258>)
 80020dc:	701a      	strb	r2, [r3, #0]
			}
			break;
 80020de:	e08c      	b.n	80021fa <SPO2Measuring+0x246>
			
		case 4:
			if (elapsedTimeCopy >= RED_OFF_TIME_us){
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80020e6:	f0c0 808a 	bcc.w	80021fe <SPO2Measuring+0x24a>

				ElapsedTimeIn_us = 0;
 80020ea:	4b47      	ldr	r3, [pc, #284]	; (8002208 <SPO2Measuring+0x254>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
				SpO2ActualSubStateSubState = 0;				
 80020f0:	4b46      	ldr	r3, [pc, #280]	; (800220c <SPO2Measuring+0x258>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
				SpO2SamplesBetweenPulses++;
 80020f6:	4b4d      	ldr	r3, [pc, #308]	; (800222c <SPO2Measuring+0x278>)
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	3301      	adds	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	4b4b      	ldr	r3, [pc, #300]	; (800222c <SPO2Measuring+0x278>)
 8002100:	801a      	strh	r2, [r3, #0]
									
				if (TimerToRecalibrate == 0){
 8002102:	4b4b      	ldr	r3, [pc, #300]	; (8002230 <SPO2Measuring+0x27c>)
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d15d      	bne.n	80021c6 <SPO2Measuring+0x212>
					
					#define MAX_CALIBRATION_ATTEMPTS	128
					static uint16_t calibrationAttempts = 0;
														
					//check if both baselines are within the limits					
					if 	((SpO2IRBaselineSignal.Result > BASELINE_SETPOINT_UPPER_LIMIT_MIN)  || (SpO2IRBaselineSignal.Result < BASELINE_SETPOINT_LOWER_LIMIT_MIN) ||
 800210a:	4b42      	ldr	r3, [pc, #264]	; (8002214 <SPO2Measuring+0x260>)
 800210c:	8a9b      	ldrh	r3, [r3, #20]
 800210e:	f240 624e 	movw	r2, #1614	; 0x64e
 8002112:	4293      	cmp	r3, r2
 8002114:	d811      	bhi.n	800213a <SPO2Measuring+0x186>
 8002116:	4b3f      	ldr	r3, [pc, #252]	; (8002214 <SPO2Measuring+0x260>)
 8002118:	8a9b      	ldrh	r3, [r3, #20]
 800211a:	f240 5254 	movw	r2, #1364	; 0x554
 800211e:	4293      	cmp	r3, r2
 8002120:	d90b      	bls.n	800213a <SPO2Measuring+0x186>
						((SpO2RedBaselineSignal.Result > BASELINE_SETPOINT_UPPER_LIMIT_MIN) || (SpO2RedBaselineSignal.Result < BASELINE_SETPOINT_LOWER_LIMIT_MIN))){
 8002122:	4b40      	ldr	r3, [pc, #256]	; (8002224 <SPO2Measuring+0x270>)
 8002124:	8a9b      	ldrh	r3, [r3, #20]
					if 	((SpO2IRBaselineSignal.Result > BASELINE_SETPOINT_UPPER_LIMIT_MIN)  || (SpO2IRBaselineSignal.Result < BASELINE_SETPOINT_LOWER_LIMIT_MIN) ||
 8002126:	f240 624e 	movw	r2, #1614	; 0x64e
 800212a:	4293      	cmp	r3, r2
 800212c:	d805      	bhi.n	800213a <SPO2Measuring+0x186>
						((SpO2RedBaselineSignal.Result > BASELINE_SETPOINT_UPPER_LIMIT_MIN) || (SpO2RedBaselineSignal.Result < BASELINE_SETPOINT_LOWER_LIMIT_MIN))){
 800212e:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <SPO2Measuring+0x270>)
 8002130:	8a9b      	ldrh	r3, [r3, #20]
 8002132:	f240 5254 	movw	r2, #1364	; 0x554
 8002136:	4293      	cmp	r3, r2
 8002138:	d83d      	bhi.n	80021b6 <SPO2Measuring+0x202>

						if (toogle == SPO2_CONTROL_RED){
 800213a:	4b3e      	ldr	r3, [pc, #248]	; (8002234 <SPO2Measuring+0x280>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d11a      	bne.n	8002178 <SPO2Measuring+0x1c4>

							if ((SpO2RedBaselineSignal.Result > BASELINE_SETPOINT_UPPER_LIMIT_MID) || (SpO2RedBaselineSignal.Result < BASELINE_SETPOINT_LOWER_LIMIT_MID)){
 8002142:	4b38      	ldr	r3, [pc, #224]	; (8002224 <SPO2Measuring+0x270>)
 8002144:	8a9b      	ldrh	r3, [r3, #20]
 8002146:	f240 7246 	movw	r2, #1862	; 0x746
 800214a:	4293      	cmp	r3, r2
 800214c:	d805      	bhi.n	800215a <SPO2Measuring+0x1a6>
 800214e:	4b35      	ldr	r3, [pc, #212]	; (8002224 <SPO2Measuring+0x270>)
 8002150:	8a9b      	ldrh	r3, [r3, #20]
 8002152:	f240 425c 	movw	r2, #1116	; 0x45c
 8002156:	4293      	cmp	r3, r2
 8002158:	d80a      	bhi.n	8002170 <SPO2Measuring+0x1bc>

								CalibrateRedLedIntensity();						
 800215a:	f000 f875 	bl	8002248 <CalibrateRedLedIntensity>
								TimerToRecalibrate = 16;
 800215e:	4b34      	ldr	r3, [pc, #208]	; (8002230 <SPO2Measuring+0x27c>)
 8002160:	2210      	movs	r2, #16
 8002162:	801a      	strh	r2, [r3, #0]
								
								calibrationAttempts++;
 8002164:	4b34      	ldr	r3, [pc, #208]	; (8002238 <SPO2Measuring+0x284>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	3301      	adds	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	4b32      	ldr	r3, [pc, #200]	; (8002238 <SPO2Measuring+0x284>)
 800216e:	801a      	strh	r2, [r3, #0]
							}
							toogle = SPO2_CONTROL_IR;							
 8002170:	4b30      	ldr	r3, [pc, #192]	; (8002234 <SPO2Measuring+0x280>)
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
						if (toogle == SPO2_CONTROL_RED){
 8002176:	e02d      	b.n	80021d4 <SPO2Measuring+0x220>
						}
						else if (toogle == SPO2_CONTROL_IR){
 8002178:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <SPO2Measuring+0x280>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d129      	bne.n	80021d4 <SPO2Measuring+0x220>

							if ((SpO2IRBaselineSignal.Result > BASELINE_SETPOINT_UPPER_LIMIT_MID)  || (SpO2IRBaselineSignal.Result < BASELINE_SETPOINT_LOWER_LIMIT_MID)){
 8002180:	4b24      	ldr	r3, [pc, #144]	; (8002214 <SPO2Measuring+0x260>)
 8002182:	8a9b      	ldrh	r3, [r3, #20]
 8002184:	f240 7246 	movw	r2, #1862	; 0x746
 8002188:	4293      	cmp	r3, r2
 800218a:	d805      	bhi.n	8002198 <SPO2Measuring+0x1e4>
 800218c:	4b21      	ldr	r3, [pc, #132]	; (8002214 <SPO2Measuring+0x260>)
 800218e:	8a9b      	ldrh	r3, [r3, #20]
 8002190:	f240 425c 	movw	r2, #1116	; 0x45c
 8002194:	4293      	cmp	r3, r2
 8002196:	d80a      	bhi.n	80021ae <SPO2Measuring+0x1fa>

								CalibrateIRLedIntensity();
 8002198:	f000 fa42 	bl	8002620 <CalibrateIRLedIntensity>
								TimerToRecalibrate = 16;
 800219c:	4b24      	ldr	r3, [pc, #144]	; (8002230 <SPO2Measuring+0x27c>)
 800219e:	2210      	movs	r2, #16
 80021a0:	801a      	strh	r2, [r3, #0]

								calibrationAttempts++;
 80021a2:	4b25      	ldr	r3, [pc, #148]	; (8002238 <SPO2Measuring+0x284>)
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	3301      	adds	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	4b23      	ldr	r3, [pc, #140]	; (8002238 <SPO2Measuring+0x284>)
 80021ac:	801a      	strh	r2, [r3, #0]
							}
							toogle = SPO2_CONTROL_RED;
 80021ae:	4b21      	ldr	r3, [pc, #132]	; (8002234 <SPO2Measuring+0x280>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
						if (toogle == SPO2_CONTROL_RED){
 80021b4:	e00e      	b.n	80021d4 <SPO2Measuring+0x220>
						}
					}
					else{

						TimerToRecalibrate = RECALIBRATE_TIME;
 80021b6:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <SPO2Measuring+0x27c>)
 80021b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021bc:	801a      	strh	r2, [r3, #0]
						calibrationAttempts = 0;
 80021be:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <SPO2Measuring+0x284>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	801a      	strh	r2, [r3, #0]
 80021c4:	e007      	b.n	80021d6 <SPO2Measuring+0x222>
					}
									
				}
				else{

					TimerToRecalibrate--;					
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <SPO2Measuring+0x27c>)
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	4b18      	ldr	r3, [pc, #96]	; (8002230 <SPO2Measuring+0x27c>)
 80021d0:	801a      	strh	r2, [r3, #0]
 80021d2:	e000      	b.n	80021d6 <SPO2Measuring+0x222>
						if (toogle == SPO2_CONTROL_RED){
 80021d4:	bf00      	nop
				}

				FindMaxAndMin();
 80021d6:	f000 fc0f 	bl	80029f8 <FindMaxAndMin>

				if ((SpO2ValidValue >= 10) && (!SpO2IsDiagnosticMode)){
 80021da:	4b18      	ldr	r3, [pc, #96]	; (800223c <SPO2Measuring+0x288>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b09      	cmp	r3, #9
 80021e0:	d90d      	bls.n	80021fe <SPO2Measuring+0x24a>
 80021e2:	4b17      	ldr	r3, [pc, #92]	; (8002240 <SPO2Measuring+0x28c>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d109      	bne.n	80021fe <SPO2Measuring+0x24a>

					//generate pox ok event
					SpO2ActualEvent = SPO2_EVENT_MEASUREMENT_COMPLETE_OK;
 80021ea:	4b16      	ldr	r3, [pc, #88]	; (8002244 <SPO2Measuring+0x290>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]
					//SpO2_AbortMeasurement();
				}
			}
			break;
 80021f0:	e005      	b.n	80021fe <SPO2Measuring+0x24a>
			break;
 80021f2:	bf00      	nop
 80021f4:	e004      	b.n	8002200 <SPO2Measuring+0x24c>
			break;
 80021f6:	bf00      	nop
 80021f8:	e002      	b.n	8002200 <SPO2Measuring+0x24c>
			break;
 80021fa:	bf00      	nop
 80021fc:	e000      	b.n	8002200 <SPO2Measuring+0x24c>
			break;
 80021fe:	bf00      	nop
	}
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	200000f0 	.word	0x200000f0
 800220c:	200000c0 	.word	0x200000c0
 8002210:	200000c8 	.word	0x200000c8
 8002214:	20000084 	.word	0x20000084
 8002218:	20000054 	.word	0x20000054
 800221c:	00000000 	.word	0x00000000
 8002220:	200000c6 	.word	0x200000c6
 8002224:	2000006c 	.word	0x2000006c
 8002228:	2000003c 	.word	0x2000003c
 800222c:	200000be 	.word	0x200000be
 8002230:	200000c4 	.word	0x200000c4
 8002234:	200000d4 	.word	0x200000d4
 8002238:	200000d6 	.word	0x200000d6
 800223c:	200000a4 	.word	0x200000a4
 8002240:	200000c2 	.word	0x200000c2
 8002244:	200000c1 	.word	0x200000c1

08002248 <CalibrateRedLedIntensity>:


/******************************************************************************
*                            Calibrate RED LED
******************************************************************************/
static void CalibrateRedLedIntensity(void){
 8002248:	b598      	push	{r3, r4, r7, lr}
 800224a:	af00      	add	r7, sp, #0

	//if signal is larger than setpoint
	if (SpO2RedBaselineSignal.Result > BASELINE_SETPOINT_UPPER_LIMIT_MAX){
 800224c:	4baa      	ldr	r3, [pc, #680]	; (80024f8 <CalibrateRedLedIntensity+0x2b0>)
 800224e:	8a9b      	ldrh	r3, [r3, #20]
 8002250:	f640 02ba 	movw	r2, #2234	; 0x8ba
 8002254:	4293      	cmp	r3, r2
 8002256:	d966      	bls.n	8002326 <CalibrateRedLedIntensity+0xde>

		if (CurrentRedValue > CURRENT_LARGE_STEP){
 8002258:	4ba8      	ldr	r3, [pc, #672]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe f905 	bl	800046c <__aeabi_i2d>
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	4ba6      	ldr	r3, [pc, #664]	; (8002500 <CalibrateRedLedIntensity+0x2b8>)
 8002268:	f7fe f9e4 	bl	8000634 <__aeabi_dcmpgt>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d014      	beq.n	800229c <CalibrateRedLedIntensity+0x54>

			//decrease offset by large steps
			CurrentRedValue -= CURRENT_LARGE_STEP;
 8002272:	4ba2      	ldr	r3, [pc, #648]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f8f8 	bl	800046c <__aeabi_i2d>
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	4b9f      	ldr	r3, [pc, #636]	; (8002500 <CalibrateRedLedIntensity+0x2b8>)
 8002282:	f7fd ffa5 	bl	80001d0 <__aeabi_dsub>
 8002286:	4603      	mov	r3, r0
 8002288:	460c      	mov	r4, r1
 800228a:	4618      	mov	r0, r3
 800228c:	4621      	mov	r1, r4
 800228e:	f7fe f9db 	bl	8000648 <__aeabi_d2uiz>
 8002292:	4603      	mov	r3, r0
 8002294:	b29a      	uxth	r2, r3
 8002296:	4b99      	ldr	r3, [pc, #612]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 8002298:	801a      	strh	r2, [r3, #0]

			//decrease offset by large steps
			CurrentRedValue += CURRENT_SHORT_STEP;
		}
	}	
}
 800229a:	e1ac      	b.n	80025f6 <CalibrateRedLedIntensity+0x3ae>
		else if (CurrentRedValue > CURRENT_MID_STEP){
 800229c:	4b97      	ldr	r3, [pc, #604]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe f8e3 	bl	800046c <__aeabi_i2d>
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	4b96      	ldr	r3, [pc, #600]	; (8002504 <CalibrateRedLedIntensity+0x2bc>)
 80022ac:	f7fe f9c2 	bl	8000634 <__aeabi_dcmpgt>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d014      	beq.n	80022e0 <CalibrateRedLedIntensity+0x98>
			CurrentRedValue -= CURRENT_MID_STEP;
 80022b6:	4b91      	ldr	r3, [pc, #580]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe f8d6 	bl	800046c <__aeabi_i2d>
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	4b8f      	ldr	r3, [pc, #572]	; (8002504 <CalibrateRedLedIntensity+0x2bc>)
 80022c6:	f7fd ff83 	bl	80001d0 <__aeabi_dsub>
 80022ca:	4603      	mov	r3, r0
 80022cc:	460c      	mov	r4, r1
 80022ce:	4618      	mov	r0, r3
 80022d0:	4621      	mov	r1, r4
 80022d2:	f7fe f9b9 	bl	8000648 <__aeabi_d2uiz>
 80022d6:	4603      	mov	r3, r0
 80022d8:	b29a      	uxth	r2, r3
 80022da:	4b88      	ldr	r3, [pc, #544]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 80022dc:	801a      	strh	r2, [r3, #0]
}
 80022de:	e18a      	b.n	80025f6 <CalibrateRedLedIntensity+0x3ae>
		else if (CurrentRedValue > CURRENT_SHORT_STEP){
 80022e0:	4b86      	ldr	r3, [pc, #536]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe f8c1 	bl	800046c <__aeabi_i2d>
 80022ea:	a37f      	add	r3, pc, #508	; (adr r3, 80024e8 <CalibrateRedLedIntensity+0x2a0>)
 80022ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f0:	f7fe f9a0 	bl	8000634 <__aeabi_dcmpgt>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d100      	bne.n	80022fc <CalibrateRedLedIntensity+0xb4>
}
 80022fa:	e17c      	b.n	80025f6 <CalibrateRedLedIntensity+0x3ae>
			CurrentRedValue -= CURRENT_SHORT_STEP;
 80022fc:	4b7f      	ldr	r3, [pc, #508]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe f8b3 	bl	800046c <__aeabi_i2d>
 8002306:	a378      	add	r3, pc, #480	; (adr r3, 80024e8 <CalibrateRedLedIntensity+0x2a0>)
 8002308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230c:	f7fd ff60 	bl	80001d0 <__aeabi_dsub>
 8002310:	4603      	mov	r3, r0
 8002312:	460c      	mov	r4, r1
 8002314:	4618      	mov	r0, r3
 8002316:	4621      	mov	r1, r4
 8002318:	f7fe f996 	bl	8000648 <__aeabi_d2uiz>
 800231c:	4603      	mov	r3, r0
 800231e:	b29a      	uxth	r2, r3
 8002320:	4b76      	ldr	r3, [pc, #472]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 8002322:	801a      	strh	r2, [r3, #0]
}
 8002324:	e167      	b.n	80025f6 <CalibrateRedLedIntensity+0x3ae>
	else if (SpO2RedBaselineSignal.Result > BASELINE_SETPOINT_UPPER_LIMIT_MID){
 8002326:	4b74      	ldr	r3, [pc, #464]	; (80024f8 <CalibrateRedLedIntensity+0x2b0>)
 8002328:	8a9b      	ldrh	r3, [r3, #20]
 800232a:	f240 7246 	movw	r2, #1862	; 0x746
 800232e:	4293      	cmp	r3, r2
 8002330:	d944      	bls.n	80023bc <CalibrateRedLedIntensity+0x174>
		if (CurrentRedValue > CURRENT_MID_STEP){
 8002332:	4b72      	ldr	r3, [pc, #456]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe f898 	bl	800046c <__aeabi_i2d>
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	4b70      	ldr	r3, [pc, #448]	; (8002504 <CalibrateRedLedIntensity+0x2bc>)
 8002342:	f7fe f977 	bl	8000634 <__aeabi_dcmpgt>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d014      	beq.n	8002376 <CalibrateRedLedIntensity+0x12e>
			CurrentRedValue -= CURRENT_MID_STEP;
 800234c:	4b6b      	ldr	r3, [pc, #428]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe f88b 	bl	800046c <__aeabi_i2d>
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	4b6a      	ldr	r3, [pc, #424]	; (8002504 <CalibrateRedLedIntensity+0x2bc>)
 800235c:	f7fd ff38 	bl	80001d0 <__aeabi_dsub>
 8002360:	4603      	mov	r3, r0
 8002362:	460c      	mov	r4, r1
 8002364:	4618      	mov	r0, r3
 8002366:	4621      	mov	r1, r4
 8002368:	f7fe f96e 	bl	8000648 <__aeabi_d2uiz>
 800236c:	4603      	mov	r3, r0
 800236e:	b29a      	uxth	r2, r3
 8002370:	4b62      	ldr	r3, [pc, #392]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 8002372:	801a      	strh	r2, [r3, #0]
}
 8002374:	e13f      	b.n	80025f6 <CalibrateRedLedIntensity+0x3ae>
		else if (CurrentRedValue > CURRENT_SHORT_STEP){
 8002376:	4b61      	ldr	r3, [pc, #388]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe f876 	bl	800046c <__aeabi_i2d>
 8002380:	a359      	add	r3, pc, #356	; (adr r3, 80024e8 <CalibrateRedLedIntensity+0x2a0>)
 8002382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002386:	f7fe f955 	bl	8000634 <__aeabi_dcmpgt>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d100      	bne.n	8002392 <CalibrateRedLedIntensity+0x14a>
}
 8002390:	e131      	b.n	80025f6 <CalibrateRedLedIntensity+0x3ae>
			CurrentRedValue -= CURRENT_SHORT_STEP;
 8002392:	4b5a      	ldr	r3, [pc, #360]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe f868 	bl	800046c <__aeabi_i2d>
 800239c:	a352      	add	r3, pc, #328	; (adr r3, 80024e8 <CalibrateRedLedIntensity+0x2a0>)
 800239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a2:	f7fd ff15 	bl	80001d0 <__aeabi_dsub>
 80023a6:	4603      	mov	r3, r0
 80023a8:	460c      	mov	r4, r1
 80023aa:	4618      	mov	r0, r3
 80023ac:	4621      	mov	r1, r4
 80023ae:	f7fe f94b 	bl	8000648 <__aeabi_d2uiz>
 80023b2:	4603      	mov	r3, r0
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	4b51      	ldr	r3, [pc, #324]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 80023b8:	801a      	strh	r2, [r3, #0]
}
 80023ba:	e11c      	b.n	80025f6 <CalibrateRedLedIntensity+0x3ae>
	else if (SpO2RedBaselineSignal.Result > BASELINE_SETPOINT_UPPER_LIMIT_MIN){
 80023bc:	4b4e      	ldr	r3, [pc, #312]	; (80024f8 <CalibrateRedLedIntensity+0x2b0>)
 80023be:	8a9b      	ldrh	r3, [r3, #20]
 80023c0:	f240 624e 	movw	r2, #1614	; 0x64e
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d922      	bls.n	800240e <CalibrateRedLedIntensity+0x1c6>
		if (CurrentRedValue > CURRENT_SHORT_STEP){
 80023c8:	4b4c      	ldr	r3, [pc, #304]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe f84d 	bl	800046c <__aeabi_i2d>
 80023d2:	a345      	add	r3, pc, #276	; (adr r3, 80024e8 <CalibrateRedLedIntensity+0x2a0>)
 80023d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d8:	f7fe f92c 	bl	8000634 <__aeabi_dcmpgt>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d100      	bne.n	80023e4 <CalibrateRedLedIntensity+0x19c>
}
 80023e2:	e108      	b.n	80025f6 <CalibrateRedLedIntensity+0x3ae>
			CurrentRedValue -= CURRENT_SHORT_STEP;
 80023e4:	4b45      	ldr	r3, [pc, #276]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe f83f 	bl	800046c <__aeabi_i2d>
 80023ee:	a33e      	add	r3, pc, #248	; (adr r3, 80024e8 <CalibrateRedLedIntensity+0x2a0>)
 80023f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f4:	f7fd feec 	bl	80001d0 <__aeabi_dsub>
 80023f8:	4603      	mov	r3, r0
 80023fa:	460c      	mov	r4, r1
 80023fc:	4618      	mov	r0, r3
 80023fe:	4621      	mov	r1, r4
 8002400:	f7fe f922 	bl	8000648 <__aeabi_d2uiz>
 8002404:	4603      	mov	r3, r0
 8002406:	b29a      	uxth	r2, r3
 8002408:	4b3c      	ldr	r3, [pc, #240]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 800240a:	801a      	strh	r2, [r3, #0]
}
 800240c:	e0f3      	b.n	80025f6 <CalibrateRedLedIntensity+0x3ae>
	else if (SpO2RedBaselineSignal.Result < BASELINE_SETPOINT_LOWER_LIMIT_MAX){
 800240e:	4b3a      	ldr	r3, [pc, #232]	; (80024f8 <CalibrateRedLedIntensity+0x2b0>)
 8002410:	8a9b      	ldrh	r3, [r3, #20]
 8002412:	f5b3 7f3a 	cmp.w	r3, #744	; 0x2e8
 8002416:	d87b      	bhi.n	8002510 <CalibrateRedLedIntensity+0x2c8>
		if (CurrentRedValue < (CURRENT_MAX_VALUE - CURRENT_LARGE_STEP)){
 8002418:	4b38      	ldr	r3, [pc, #224]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f825 	bl	800046c <__aeabi_i2d>
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	4b38      	ldr	r3, [pc, #224]	; (8002508 <CalibrateRedLedIntensity+0x2c0>)
 8002428:	f7fe f8e6 	bl	80005f8 <__aeabi_dcmplt>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d014      	beq.n	800245c <CalibrateRedLedIntensity+0x214>
			CurrentRedValue += CURRENT_LARGE_STEP;
 8002432:	4b32      	ldr	r3, [pc, #200]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe f818 	bl	800046c <__aeabi_i2d>
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	4b2f      	ldr	r3, [pc, #188]	; (8002500 <CalibrateRedLedIntensity+0x2b8>)
 8002442:	f7fd fec7 	bl	80001d4 <__adddf3>
 8002446:	4603      	mov	r3, r0
 8002448:	460c      	mov	r4, r1
 800244a:	4618      	mov	r0, r3
 800244c:	4621      	mov	r1, r4
 800244e:	f7fe f8fb 	bl	8000648 <__aeabi_d2uiz>
 8002452:	4603      	mov	r3, r0
 8002454:	b29a      	uxth	r2, r3
 8002456:	4b29      	ldr	r3, [pc, #164]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 8002458:	801a      	strh	r2, [r3, #0]
}
 800245a:	e0cc      	b.n	80025f6 <CalibrateRedLedIntensity+0x3ae>
		else if (CurrentRedValue < (CURRENT_MAX_VALUE - CURRENT_MID_STEP)){
 800245c:	4b27      	ldr	r3, [pc, #156]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7fe f803 	bl	800046c <__aeabi_i2d>
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	4b28      	ldr	r3, [pc, #160]	; (800250c <CalibrateRedLedIntensity+0x2c4>)
 800246c:	f7fe f8c4 	bl	80005f8 <__aeabi_dcmplt>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d014      	beq.n	80024a0 <CalibrateRedLedIntensity+0x258>
			CurrentRedValue += CURRENT_MID_STEP;
 8002476:	4b21      	ldr	r3, [pc, #132]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fd fff6 	bl	800046c <__aeabi_i2d>
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	4b1f      	ldr	r3, [pc, #124]	; (8002504 <CalibrateRedLedIntensity+0x2bc>)
 8002486:	f7fd fea5 	bl	80001d4 <__adddf3>
 800248a:	4603      	mov	r3, r0
 800248c:	460c      	mov	r4, r1
 800248e:	4618      	mov	r0, r3
 8002490:	4621      	mov	r1, r4
 8002492:	f7fe f8d9 	bl	8000648 <__aeabi_d2uiz>
 8002496:	4603      	mov	r3, r0
 8002498:	b29a      	uxth	r2, r3
 800249a:	4b18      	ldr	r3, [pc, #96]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 800249c:	801a      	strh	r2, [r3, #0]
}
 800249e:	e0aa      	b.n	80025f6 <CalibrateRedLedIntensity+0x3ae>
		else if (CurrentRedValue < (CURRENT_MAX_VALUE - CURRENT_SHORT_STEP)){
 80024a0:	4b16      	ldr	r3, [pc, #88]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fd ffe1 	bl	800046c <__aeabi_i2d>
 80024aa:	a311      	add	r3, pc, #68	; (adr r3, 80024f0 <CalibrateRedLedIntensity+0x2a8>)
 80024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b0:	f7fe f8a2 	bl	80005f8 <__aeabi_dcmplt>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d100      	bne.n	80024bc <CalibrateRedLedIntensity+0x274>
}
 80024ba:	e09c      	b.n	80025f6 <CalibrateRedLedIntensity+0x3ae>
			CurrentRedValue += CURRENT_SHORT_STEP;
 80024bc:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fd ffd3 	bl	800046c <__aeabi_i2d>
 80024c6:	a308      	add	r3, pc, #32	; (adr r3, 80024e8 <CalibrateRedLedIntensity+0x2a0>)
 80024c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024cc:	f7fd fe82 	bl	80001d4 <__adddf3>
 80024d0:	4603      	mov	r3, r0
 80024d2:	460c      	mov	r4, r1
 80024d4:	4618      	mov	r0, r3
 80024d6:	4621      	mov	r1, r4
 80024d8:	f7fe f8b6 	bl	8000648 <__aeabi_d2uiz>
 80024dc:	4603      	mov	r3, r0
 80024de:	b29a      	uxth	r2, r3
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <CalibrateRedLedIntensity+0x2b4>)
 80024e2:	801a      	strh	r2, [r3, #0]
}
 80024e4:	e087      	b.n	80025f6 <CalibrateRedLedIntensity+0x3ae>
 80024e6:	bf00      	nop
 80024e8:	9999999a 	.word	0x9999999a
 80024ec:	3fb99999 	.word	0x3fb99999
 80024f0:	66666666 	.word	0x66666666
 80024f4:	4033e666 	.word	0x4033e666
 80024f8:	2000006c 	.word	0x2000006c
 80024fc:	200000c6 	.word	0x200000c6
 8002500:	40140000 	.word	0x40140000
 8002504:	3ff00000 	.word	0x3ff00000
 8002508:	402e0000 	.word	0x402e0000
 800250c:	40330000 	.word	0x40330000
	else if (SpO2RedBaselineSignal.Result < BASELINE_SETPOINT_LOWER_LIMIT_MID){
 8002510:	4b3f      	ldr	r3, [pc, #252]	; (8002610 <CalibrateRedLedIntensity+0x3c8>)
 8002512:	8a9b      	ldrh	r3, [r3, #20]
 8002514:	f240 425c 	movw	r2, #1116	; 0x45c
 8002518:	4293      	cmp	r3, r2
 800251a:	d844      	bhi.n	80025a6 <CalibrateRedLedIntensity+0x35e>
		if (CurrentRedValue < (CURRENT_MAX_VALUE - CURRENT_MID_STEP)){
 800251c:	4b3d      	ldr	r3, [pc, #244]	; (8002614 <CalibrateRedLedIntensity+0x3cc>)
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7fd ffa3 	bl	800046c <__aeabi_i2d>
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	4b3b      	ldr	r3, [pc, #236]	; (8002618 <CalibrateRedLedIntensity+0x3d0>)
 800252c:	f7fe f864 	bl	80005f8 <__aeabi_dcmplt>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d014      	beq.n	8002560 <CalibrateRedLedIntensity+0x318>
			CurrentRedValue += CURRENT_MID_STEP;
 8002536:	4b37      	ldr	r3, [pc, #220]	; (8002614 <CalibrateRedLedIntensity+0x3cc>)
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fd ff96 	bl	800046c <__aeabi_i2d>
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	4b35      	ldr	r3, [pc, #212]	; (800261c <CalibrateRedLedIntensity+0x3d4>)
 8002546:	f7fd fe45 	bl	80001d4 <__adddf3>
 800254a:	4603      	mov	r3, r0
 800254c:	460c      	mov	r4, r1
 800254e:	4618      	mov	r0, r3
 8002550:	4621      	mov	r1, r4
 8002552:	f7fe f879 	bl	8000648 <__aeabi_d2uiz>
 8002556:	4603      	mov	r3, r0
 8002558:	b29a      	uxth	r2, r3
 800255a:	4b2e      	ldr	r3, [pc, #184]	; (8002614 <CalibrateRedLedIntensity+0x3cc>)
 800255c:	801a      	strh	r2, [r3, #0]
}
 800255e:	e04a      	b.n	80025f6 <CalibrateRedLedIntensity+0x3ae>
		else if (CurrentRedValue < (CURRENT_MAX_VALUE - CURRENT_SHORT_STEP)){
 8002560:	4b2c      	ldr	r3, [pc, #176]	; (8002614 <CalibrateRedLedIntensity+0x3cc>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fd ff81 	bl	800046c <__aeabi_i2d>
 800256a:	a325      	add	r3, pc, #148	; (adr r3, 8002600 <CalibrateRedLedIntensity+0x3b8>)
 800256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002570:	f7fe f842 	bl	80005f8 <__aeabi_dcmplt>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d100      	bne.n	800257c <CalibrateRedLedIntensity+0x334>
}
 800257a:	e03c      	b.n	80025f6 <CalibrateRedLedIntensity+0x3ae>
			CurrentRedValue += CURRENT_SHORT_STEP;
 800257c:	4b25      	ldr	r3, [pc, #148]	; (8002614 <CalibrateRedLedIntensity+0x3cc>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7fd ff73 	bl	800046c <__aeabi_i2d>
 8002586:	a320      	add	r3, pc, #128	; (adr r3, 8002608 <CalibrateRedLedIntensity+0x3c0>)
 8002588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258c:	f7fd fe22 	bl	80001d4 <__adddf3>
 8002590:	4603      	mov	r3, r0
 8002592:	460c      	mov	r4, r1
 8002594:	4618      	mov	r0, r3
 8002596:	4621      	mov	r1, r4
 8002598:	f7fe f856 	bl	8000648 <__aeabi_d2uiz>
 800259c:	4603      	mov	r3, r0
 800259e:	b29a      	uxth	r2, r3
 80025a0:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <CalibrateRedLedIntensity+0x3cc>)
 80025a2:	801a      	strh	r2, [r3, #0]
}
 80025a4:	e027      	b.n	80025f6 <CalibrateRedLedIntensity+0x3ae>
	else if (SpO2RedBaselineSignal.Result < BASELINE_SETPOINT_LOWER_LIMIT_MIN){
 80025a6:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <CalibrateRedLedIntensity+0x3c8>)
 80025a8:	8a9b      	ldrh	r3, [r3, #20]
 80025aa:	f240 5254 	movw	r2, #1364	; 0x554
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d821      	bhi.n	80025f6 <CalibrateRedLedIntensity+0x3ae>
		if (CurrentRedValue < (CURRENT_MAX_VALUE - CURRENT_SHORT_STEP)){
 80025b2:	4b18      	ldr	r3, [pc, #96]	; (8002614 <CalibrateRedLedIntensity+0x3cc>)
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fd ff58 	bl	800046c <__aeabi_i2d>
 80025bc:	a310      	add	r3, pc, #64	; (adr r3, 8002600 <CalibrateRedLedIntensity+0x3b8>)
 80025be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c2:	f7fe f819 	bl	80005f8 <__aeabi_dcmplt>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d100      	bne.n	80025ce <CalibrateRedLedIntensity+0x386>
}
 80025cc:	e013      	b.n	80025f6 <CalibrateRedLedIntensity+0x3ae>
			CurrentRedValue += CURRENT_SHORT_STEP;
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <CalibrateRedLedIntensity+0x3cc>)
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fd ff4a 	bl	800046c <__aeabi_i2d>
 80025d8:	a30b      	add	r3, pc, #44	; (adr r3, 8002608 <CalibrateRedLedIntensity+0x3c0>)
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	f7fd fdf9 	bl	80001d4 <__adddf3>
 80025e2:	4603      	mov	r3, r0
 80025e4:	460c      	mov	r4, r1
 80025e6:	4618      	mov	r0, r3
 80025e8:	4621      	mov	r1, r4
 80025ea:	f7fe f82d 	bl	8000648 <__aeabi_d2uiz>
 80025ee:	4603      	mov	r3, r0
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <CalibrateRedLedIntensity+0x3cc>)
 80025f4:	801a      	strh	r2, [r3, #0]
}
 80025f6:	bf00      	nop
 80025f8:	bd98      	pop	{r3, r4, r7, pc}
 80025fa:	bf00      	nop
 80025fc:	f3af 8000 	nop.w
 8002600:	66666666 	.word	0x66666666
 8002604:	4033e666 	.word	0x4033e666
 8002608:	9999999a 	.word	0x9999999a
 800260c:	3fb99999 	.word	0x3fb99999
 8002610:	2000006c 	.word	0x2000006c
 8002614:	200000c6 	.word	0x200000c6
 8002618:	40330000 	.word	0x40330000
 800261c:	3ff00000 	.word	0x3ff00000

08002620 <CalibrateIRLedIntensity>:

/******************************************************************************
*                              Calibrate IR LED
******************************************************************************/
static void CalibrateIRLedIntensity(void){
 8002620:	b598      	push	{r3, r4, r7, lr}
 8002622:	af00      	add	r7, sp, #0

	//if signal is larger than setpoint
	if (SpO2IRBaselineSignal.Result > BASELINE_SETPOINT_UPPER_LIMIT_MAX){
 8002624:	4baa      	ldr	r3, [pc, #680]	; (80028d0 <CalibrateIRLedIntensity+0x2b0>)
 8002626:	8a9b      	ldrh	r3, [r3, #20]
 8002628:	f640 02ba 	movw	r2, #2234	; 0x8ba
 800262c:	4293      	cmp	r3, r2
 800262e:	d966      	bls.n	80026fe <CalibrateIRLedIntensity+0xde>

		if (CurrentIRValue > CURRENT_LARGE_STEP){
 8002630:	4ba8      	ldr	r3, [pc, #672]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7fd ff19 	bl	800046c <__aeabi_i2d>
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	4ba6      	ldr	r3, [pc, #664]	; (80028d8 <CalibrateIRLedIntensity+0x2b8>)
 8002640:	f7fd fff8 	bl	8000634 <__aeabi_dcmpgt>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d014      	beq.n	8002674 <CalibrateIRLedIntensity+0x54>

			//decrease offset by large steps
			CurrentIRValue -= CURRENT_LARGE_STEP;
 800264a:	4ba2      	ldr	r3, [pc, #648]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fd ff0c 	bl	800046c <__aeabi_i2d>
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	4b9f      	ldr	r3, [pc, #636]	; (80028d8 <CalibrateIRLedIntensity+0x2b8>)
 800265a:	f7fd fdb9 	bl	80001d0 <__aeabi_dsub>
 800265e:	4603      	mov	r3, r0
 8002660:	460c      	mov	r4, r1
 8002662:	4618      	mov	r0, r3
 8002664:	4621      	mov	r1, r4
 8002666:	f7fd ffef 	bl	8000648 <__aeabi_d2uiz>
 800266a:	4603      	mov	r3, r0
 800266c:	b29a      	uxth	r2, r3
 800266e:	4b99      	ldr	r3, [pc, #612]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 8002670:	801a      	strh	r2, [r3, #0]

			//decrease offset by large steps
			CurrentIRValue += CURRENT_SHORT_STEP;
		}
	}		
}
 8002672:	e1ac      	b.n	80029ce <CalibrateIRLedIntensity+0x3ae>
		else if (CurrentIRValue > CURRENT_MID_STEP){
 8002674:	4b97      	ldr	r3, [pc, #604]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7fd fef7 	bl	800046c <__aeabi_i2d>
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	4b96      	ldr	r3, [pc, #600]	; (80028dc <CalibrateIRLedIntensity+0x2bc>)
 8002684:	f7fd ffd6 	bl	8000634 <__aeabi_dcmpgt>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d014      	beq.n	80026b8 <CalibrateIRLedIntensity+0x98>
			CurrentIRValue -= CURRENT_MID_STEP;
 800268e:	4b91      	ldr	r3, [pc, #580]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd feea 	bl	800046c <__aeabi_i2d>
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	4b8f      	ldr	r3, [pc, #572]	; (80028dc <CalibrateIRLedIntensity+0x2bc>)
 800269e:	f7fd fd97 	bl	80001d0 <__aeabi_dsub>
 80026a2:	4603      	mov	r3, r0
 80026a4:	460c      	mov	r4, r1
 80026a6:	4618      	mov	r0, r3
 80026a8:	4621      	mov	r1, r4
 80026aa:	f7fd ffcd 	bl	8000648 <__aeabi_d2uiz>
 80026ae:	4603      	mov	r3, r0
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	4b88      	ldr	r3, [pc, #544]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 80026b4:	801a      	strh	r2, [r3, #0]
}
 80026b6:	e18a      	b.n	80029ce <CalibrateIRLedIntensity+0x3ae>
		else if (CurrentIRValue > CURRENT_SHORT_STEP){
 80026b8:	4b86      	ldr	r3, [pc, #536]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd fed5 	bl	800046c <__aeabi_i2d>
 80026c2:	a37f      	add	r3, pc, #508	; (adr r3, 80028c0 <CalibrateIRLedIntensity+0x2a0>)
 80026c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c8:	f7fd ffb4 	bl	8000634 <__aeabi_dcmpgt>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d100      	bne.n	80026d4 <CalibrateIRLedIntensity+0xb4>
}
 80026d2:	e17c      	b.n	80029ce <CalibrateIRLedIntensity+0x3ae>
			CurrentIRValue -= CURRENT_SHORT_STEP;
 80026d4:	4b7f      	ldr	r3, [pc, #508]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fd fec7 	bl	800046c <__aeabi_i2d>
 80026de:	a378      	add	r3, pc, #480	; (adr r3, 80028c0 <CalibrateIRLedIntensity+0x2a0>)
 80026e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e4:	f7fd fd74 	bl	80001d0 <__aeabi_dsub>
 80026e8:	4603      	mov	r3, r0
 80026ea:	460c      	mov	r4, r1
 80026ec:	4618      	mov	r0, r3
 80026ee:	4621      	mov	r1, r4
 80026f0:	f7fd ffaa 	bl	8000648 <__aeabi_d2uiz>
 80026f4:	4603      	mov	r3, r0
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	4b76      	ldr	r3, [pc, #472]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 80026fa:	801a      	strh	r2, [r3, #0]
}
 80026fc:	e167      	b.n	80029ce <CalibrateIRLedIntensity+0x3ae>
	else if (SpO2IRBaselineSignal.Result > BASELINE_SETPOINT_UPPER_LIMIT_MID){
 80026fe:	4b74      	ldr	r3, [pc, #464]	; (80028d0 <CalibrateIRLedIntensity+0x2b0>)
 8002700:	8a9b      	ldrh	r3, [r3, #20]
 8002702:	f240 7246 	movw	r2, #1862	; 0x746
 8002706:	4293      	cmp	r3, r2
 8002708:	d944      	bls.n	8002794 <CalibrateIRLedIntensity+0x174>
		if (CurrentIRValue > CURRENT_MID_STEP){
 800270a:	4b72      	ldr	r3, [pc, #456]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd feac 	bl	800046c <__aeabi_i2d>
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	4b70      	ldr	r3, [pc, #448]	; (80028dc <CalibrateIRLedIntensity+0x2bc>)
 800271a:	f7fd ff8b 	bl	8000634 <__aeabi_dcmpgt>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d014      	beq.n	800274e <CalibrateIRLedIntensity+0x12e>
			CurrentIRValue -= CURRENT_MID_STEP;
 8002724:	4b6b      	ldr	r3, [pc, #428]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7fd fe9f 	bl	800046c <__aeabi_i2d>
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	4b6a      	ldr	r3, [pc, #424]	; (80028dc <CalibrateIRLedIntensity+0x2bc>)
 8002734:	f7fd fd4c 	bl	80001d0 <__aeabi_dsub>
 8002738:	4603      	mov	r3, r0
 800273a:	460c      	mov	r4, r1
 800273c:	4618      	mov	r0, r3
 800273e:	4621      	mov	r1, r4
 8002740:	f7fd ff82 	bl	8000648 <__aeabi_d2uiz>
 8002744:	4603      	mov	r3, r0
 8002746:	b29a      	uxth	r2, r3
 8002748:	4b62      	ldr	r3, [pc, #392]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 800274a:	801a      	strh	r2, [r3, #0]
}
 800274c:	e13f      	b.n	80029ce <CalibrateIRLedIntensity+0x3ae>
		else if (CurrentIRValue > CURRENT_SHORT_STEP){
 800274e:	4b61      	ldr	r3, [pc, #388]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7fd fe8a 	bl	800046c <__aeabi_i2d>
 8002758:	a359      	add	r3, pc, #356	; (adr r3, 80028c0 <CalibrateIRLedIntensity+0x2a0>)
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	f7fd ff69 	bl	8000634 <__aeabi_dcmpgt>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d100      	bne.n	800276a <CalibrateIRLedIntensity+0x14a>
}
 8002768:	e131      	b.n	80029ce <CalibrateIRLedIntensity+0x3ae>
			CurrentIRValue -= CURRENT_SHORT_STEP;
 800276a:	4b5a      	ldr	r3, [pc, #360]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fe7c 	bl	800046c <__aeabi_i2d>
 8002774:	a352      	add	r3, pc, #328	; (adr r3, 80028c0 <CalibrateIRLedIntensity+0x2a0>)
 8002776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277a:	f7fd fd29 	bl	80001d0 <__aeabi_dsub>
 800277e:	4603      	mov	r3, r0
 8002780:	460c      	mov	r4, r1
 8002782:	4618      	mov	r0, r3
 8002784:	4621      	mov	r1, r4
 8002786:	f7fd ff5f 	bl	8000648 <__aeabi_d2uiz>
 800278a:	4603      	mov	r3, r0
 800278c:	b29a      	uxth	r2, r3
 800278e:	4b51      	ldr	r3, [pc, #324]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 8002790:	801a      	strh	r2, [r3, #0]
}
 8002792:	e11c      	b.n	80029ce <CalibrateIRLedIntensity+0x3ae>
	else if (SpO2IRBaselineSignal.Result > BASELINE_SETPOINT_UPPER_LIMIT_MIN){
 8002794:	4b4e      	ldr	r3, [pc, #312]	; (80028d0 <CalibrateIRLedIntensity+0x2b0>)
 8002796:	8a9b      	ldrh	r3, [r3, #20]
 8002798:	f240 624e 	movw	r2, #1614	; 0x64e
 800279c:	4293      	cmp	r3, r2
 800279e:	d922      	bls.n	80027e6 <CalibrateIRLedIntensity+0x1c6>
		if (CurrentIRValue > CURRENT_SHORT_STEP){
 80027a0:	4b4c      	ldr	r3, [pc, #304]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd fe61 	bl	800046c <__aeabi_i2d>
 80027aa:	a345      	add	r3, pc, #276	; (adr r3, 80028c0 <CalibrateIRLedIntensity+0x2a0>)
 80027ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b0:	f7fd ff40 	bl	8000634 <__aeabi_dcmpgt>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d100      	bne.n	80027bc <CalibrateIRLedIntensity+0x19c>
}
 80027ba:	e108      	b.n	80029ce <CalibrateIRLedIntensity+0x3ae>
			CurrentIRValue -= CURRENT_SHORT_STEP;
 80027bc:	4b45      	ldr	r3, [pc, #276]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fd fe53 	bl	800046c <__aeabi_i2d>
 80027c6:	a33e      	add	r3, pc, #248	; (adr r3, 80028c0 <CalibrateIRLedIntensity+0x2a0>)
 80027c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027cc:	f7fd fd00 	bl	80001d0 <__aeabi_dsub>
 80027d0:	4603      	mov	r3, r0
 80027d2:	460c      	mov	r4, r1
 80027d4:	4618      	mov	r0, r3
 80027d6:	4621      	mov	r1, r4
 80027d8:	f7fd ff36 	bl	8000648 <__aeabi_d2uiz>
 80027dc:	4603      	mov	r3, r0
 80027de:	b29a      	uxth	r2, r3
 80027e0:	4b3c      	ldr	r3, [pc, #240]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 80027e2:	801a      	strh	r2, [r3, #0]
}
 80027e4:	e0f3      	b.n	80029ce <CalibrateIRLedIntensity+0x3ae>
	else if (SpO2IRBaselineSignal.Result < BASELINE_SETPOINT_LOWER_LIMIT_MAX){
 80027e6:	4b3a      	ldr	r3, [pc, #232]	; (80028d0 <CalibrateIRLedIntensity+0x2b0>)
 80027e8:	8a9b      	ldrh	r3, [r3, #20]
 80027ea:	f5b3 7f3a 	cmp.w	r3, #744	; 0x2e8
 80027ee:	d87b      	bhi.n	80028e8 <CalibrateIRLedIntensity+0x2c8>
		if (CurrentIRValue < (CURRENT_MAX_VALUE - CURRENT_LARGE_STEP)){
 80027f0:	4b38      	ldr	r3, [pc, #224]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fd fe39 	bl	800046c <__aeabi_i2d>
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	4b38      	ldr	r3, [pc, #224]	; (80028e0 <CalibrateIRLedIntensity+0x2c0>)
 8002800:	f7fd fefa 	bl	80005f8 <__aeabi_dcmplt>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d014      	beq.n	8002834 <CalibrateIRLedIntensity+0x214>
			CurrentIRValue += CURRENT_LARGE_STEP;
 800280a:	4b32      	ldr	r3, [pc, #200]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fd fe2c 	bl	800046c <__aeabi_i2d>
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	4b2f      	ldr	r3, [pc, #188]	; (80028d8 <CalibrateIRLedIntensity+0x2b8>)
 800281a:	f7fd fcdb 	bl	80001d4 <__adddf3>
 800281e:	4603      	mov	r3, r0
 8002820:	460c      	mov	r4, r1
 8002822:	4618      	mov	r0, r3
 8002824:	4621      	mov	r1, r4
 8002826:	f7fd ff0f 	bl	8000648 <__aeabi_d2uiz>
 800282a:	4603      	mov	r3, r0
 800282c:	b29a      	uxth	r2, r3
 800282e:	4b29      	ldr	r3, [pc, #164]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 8002830:	801a      	strh	r2, [r3, #0]
}
 8002832:	e0cc      	b.n	80029ce <CalibrateIRLedIntensity+0x3ae>
		else if (CurrentIRValue < (CURRENT_MAX_VALUE - CURRENT_MID_STEP)){
 8002834:	4b27      	ldr	r3, [pc, #156]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fe17 	bl	800046c <__aeabi_i2d>
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	4b28      	ldr	r3, [pc, #160]	; (80028e4 <CalibrateIRLedIntensity+0x2c4>)
 8002844:	f7fd fed8 	bl	80005f8 <__aeabi_dcmplt>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d014      	beq.n	8002878 <CalibrateIRLedIntensity+0x258>
			CurrentIRValue += CURRENT_MID_STEP;
 800284e:	4b21      	ldr	r3, [pc, #132]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fd fe0a 	bl	800046c <__aeabi_i2d>
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	4b1f      	ldr	r3, [pc, #124]	; (80028dc <CalibrateIRLedIntensity+0x2bc>)
 800285e:	f7fd fcb9 	bl	80001d4 <__adddf3>
 8002862:	4603      	mov	r3, r0
 8002864:	460c      	mov	r4, r1
 8002866:	4618      	mov	r0, r3
 8002868:	4621      	mov	r1, r4
 800286a:	f7fd feed 	bl	8000648 <__aeabi_d2uiz>
 800286e:	4603      	mov	r3, r0
 8002870:	b29a      	uxth	r2, r3
 8002872:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 8002874:	801a      	strh	r2, [r3, #0]
}
 8002876:	e0aa      	b.n	80029ce <CalibrateIRLedIntensity+0x3ae>
		else if (CurrentIRValue < (CURRENT_MAX_VALUE - CURRENT_SHORT_STEP)){
 8002878:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7fd fdf5 	bl	800046c <__aeabi_i2d>
 8002882:	a311      	add	r3, pc, #68	; (adr r3, 80028c8 <CalibrateIRLedIntensity+0x2a8>)
 8002884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002888:	f7fd feb6 	bl	80005f8 <__aeabi_dcmplt>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d100      	bne.n	8002894 <CalibrateIRLedIntensity+0x274>
}
 8002892:	e09c      	b.n	80029ce <CalibrateIRLedIntensity+0x3ae>
			CurrentIRValue += CURRENT_SHORT_STEP;
 8002894:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f7fd fde7 	bl	800046c <__aeabi_i2d>
 800289e:	a308      	add	r3, pc, #32	; (adr r3, 80028c0 <CalibrateIRLedIntensity+0x2a0>)
 80028a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a4:	f7fd fc96 	bl	80001d4 <__adddf3>
 80028a8:	4603      	mov	r3, r0
 80028aa:	460c      	mov	r4, r1
 80028ac:	4618      	mov	r0, r3
 80028ae:	4621      	mov	r1, r4
 80028b0:	f7fd feca 	bl	8000648 <__aeabi_d2uiz>
 80028b4:	4603      	mov	r3, r0
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <CalibrateIRLedIntensity+0x2b4>)
 80028ba:	801a      	strh	r2, [r3, #0]
}
 80028bc:	e087      	b.n	80029ce <CalibrateIRLedIntensity+0x3ae>
 80028be:	bf00      	nop
 80028c0:	9999999a 	.word	0x9999999a
 80028c4:	3fb99999 	.word	0x3fb99999
 80028c8:	66666666 	.word	0x66666666
 80028cc:	4033e666 	.word	0x4033e666
 80028d0:	20000084 	.word	0x20000084
 80028d4:	200000c8 	.word	0x200000c8
 80028d8:	40140000 	.word	0x40140000
 80028dc:	3ff00000 	.word	0x3ff00000
 80028e0:	402e0000 	.word	0x402e0000
 80028e4:	40330000 	.word	0x40330000
	else if (SpO2IRBaselineSignal.Result < BASELINE_SETPOINT_LOWER_LIMIT_MID){
 80028e8:	4b3f      	ldr	r3, [pc, #252]	; (80029e8 <CalibrateIRLedIntensity+0x3c8>)
 80028ea:	8a9b      	ldrh	r3, [r3, #20]
 80028ec:	f240 425c 	movw	r2, #1116	; 0x45c
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d844      	bhi.n	800297e <CalibrateIRLedIntensity+0x35e>
		if (CurrentIRValue < (CURRENT_MAX_VALUE - CURRENT_MID_STEP)){
 80028f4:	4b3d      	ldr	r3, [pc, #244]	; (80029ec <CalibrateIRLedIntensity+0x3cc>)
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fd fdb7 	bl	800046c <__aeabi_i2d>
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	4b3b      	ldr	r3, [pc, #236]	; (80029f0 <CalibrateIRLedIntensity+0x3d0>)
 8002904:	f7fd fe78 	bl	80005f8 <__aeabi_dcmplt>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d014      	beq.n	8002938 <CalibrateIRLedIntensity+0x318>
			CurrentIRValue += CURRENT_MID_STEP;
 800290e:	4b37      	ldr	r3, [pc, #220]	; (80029ec <CalibrateIRLedIntensity+0x3cc>)
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7fd fdaa 	bl	800046c <__aeabi_i2d>
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	4b35      	ldr	r3, [pc, #212]	; (80029f4 <CalibrateIRLedIntensity+0x3d4>)
 800291e:	f7fd fc59 	bl	80001d4 <__adddf3>
 8002922:	4603      	mov	r3, r0
 8002924:	460c      	mov	r4, r1
 8002926:	4618      	mov	r0, r3
 8002928:	4621      	mov	r1, r4
 800292a:	f7fd fe8d 	bl	8000648 <__aeabi_d2uiz>
 800292e:	4603      	mov	r3, r0
 8002930:	b29a      	uxth	r2, r3
 8002932:	4b2e      	ldr	r3, [pc, #184]	; (80029ec <CalibrateIRLedIntensity+0x3cc>)
 8002934:	801a      	strh	r2, [r3, #0]
}
 8002936:	e04a      	b.n	80029ce <CalibrateIRLedIntensity+0x3ae>
		else if (CurrentIRValue < (CURRENT_MAX_VALUE - CURRENT_SHORT_STEP)){
 8002938:	4b2c      	ldr	r3, [pc, #176]	; (80029ec <CalibrateIRLedIntensity+0x3cc>)
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd fd95 	bl	800046c <__aeabi_i2d>
 8002942:	a325      	add	r3, pc, #148	; (adr r3, 80029d8 <CalibrateIRLedIntensity+0x3b8>)
 8002944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002948:	f7fd fe56 	bl	80005f8 <__aeabi_dcmplt>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d100      	bne.n	8002954 <CalibrateIRLedIntensity+0x334>
}
 8002952:	e03c      	b.n	80029ce <CalibrateIRLedIntensity+0x3ae>
			CurrentIRValue += CURRENT_SHORT_STEP;
 8002954:	4b25      	ldr	r3, [pc, #148]	; (80029ec <CalibrateIRLedIntensity+0x3cc>)
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7fd fd87 	bl	800046c <__aeabi_i2d>
 800295e:	a320      	add	r3, pc, #128	; (adr r3, 80029e0 <CalibrateIRLedIntensity+0x3c0>)
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	f7fd fc36 	bl	80001d4 <__adddf3>
 8002968:	4603      	mov	r3, r0
 800296a:	460c      	mov	r4, r1
 800296c:	4618      	mov	r0, r3
 800296e:	4621      	mov	r1, r4
 8002970:	f7fd fe6a 	bl	8000648 <__aeabi_d2uiz>
 8002974:	4603      	mov	r3, r0
 8002976:	b29a      	uxth	r2, r3
 8002978:	4b1c      	ldr	r3, [pc, #112]	; (80029ec <CalibrateIRLedIntensity+0x3cc>)
 800297a:	801a      	strh	r2, [r3, #0]
}
 800297c:	e027      	b.n	80029ce <CalibrateIRLedIntensity+0x3ae>
	else if (SpO2IRBaselineSignal.Result < BASELINE_SETPOINT_LOWER_LIMIT_MIN){
 800297e:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <CalibrateIRLedIntensity+0x3c8>)
 8002980:	8a9b      	ldrh	r3, [r3, #20]
 8002982:	f240 5254 	movw	r2, #1364	; 0x554
 8002986:	4293      	cmp	r3, r2
 8002988:	d821      	bhi.n	80029ce <CalibrateIRLedIntensity+0x3ae>
		if (CurrentIRValue < (CURRENT_MAX_VALUE - CURRENT_SHORT_STEP)){
 800298a:	4b18      	ldr	r3, [pc, #96]	; (80029ec <CalibrateIRLedIntensity+0x3cc>)
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fd fd6c 	bl	800046c <__aeabi_i2d>
 8002994:	a310      	add	r3, pc, #64	; (adr r3, 80029d8 <CalibrateIRLedIntensity+0x3b8>)
 8002996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299a:	f7fd fe2d 	bl	80005f8 <__aeabi_dcmplt>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d100      	bne.n	80029a6 <CalibrateIRLedIntensity+0x386>
}
 80029a4:	e013      	b.n	80029ce <CalibrateIRLedIntensity+0x3ae>
			CurrentIRValue += CURRENT_SHORT_STEP;
 80029a6:	4b11      	ldr	r3, [pc, #68]	; (80029ec <CalibrateIRLedIntensity+0x3cc>)
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fd fd5e 	bl	800046c <__aeabi_i2d>
 80029b0:	a30b      	add	r3, pc, #44	; (adr r3, 80029e0 <CalibrateIRLedIntensity+0x3c0>)
 80029b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b6:	f7fd fc0d 	bl	80001d4 <__adddf3>
 80029ba:	4603      	mov	r3, r0
 80029bc:	460c      	mov	r4, r1
 80029be:	4618      	mov	r0, r3
 80029c0:	4621      	mov	r1, r4
 80029c2:	f7fd fe41 	bl	8000648 <__aeabi_d2uiz>
 80029c6:	4603      	mov	r3, r0
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	4b08      	ldr	r3, [pc, #32]	; (80029ec <CalibrateIRLedIntensity+0x3cc>)
 80029cc:	801a      	strh	r2, [r3, #0]
}
 80029ce:	bf00      	nop
 80029d0:	bd98      	pop	{r3, r4, r7, pc}
 80029d2:	bf00      	nop
 80029d4:	f3af 8000 	nop.w
 80029d8:	66666666 	.word	0x66666666
 80029dc:	4033e666 	.word	0x4033e666
 80029e0:	9999999a 	.word	0x9999999a
 80029e4:	3fb99999 	.word	0x3fb99999
 80029e8:	20000084 	.word	0x20000084
 80029ec:	200000c8 	.word	0x200000c8
 80029f0:	40330000 	.word	0x40330000
 80029f4:	3ff00000 	.word	0x3ff00000

080029f8 <FindMaxAndMin>:
/******************************************************************************
*                             Find MAX and MIN
******************************************************************************/


static void FindMaxAndMin(void){
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0

	static uint16_t comparationWindowTimer;
	static uint8_t subStateFindingMaxAndMin;
		
	
	if (subStateFindingMaxAndMin == SPO2_SUBSTATE_FINDING_MAX){
 80029fc:	4b34      	ldr	r3, [pc, #208]	; (8002ad0 <FindMaxAndMin+0xd8>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d12d      	bne.n	8002a60 <FindMaxAndMin+0x68>

		//if the SpO2 signal is going up
		if (SpO2IRLedSignal.Result > SpO2IRMax){
 8002a04:	4b33      	ldr	r3, [pc, #204]	; (8002ad4 <FindMaxAndMin+0xdc>)
 8002a06:	8a9a      	ldrh	r2, [r3, #20]
 8002a08:	4b33      	ldr	r3, [pc, #204]	; (8002ad8 <FindMaxAndMin+0xe0>)
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d90b      	bls.n	8002a28 <FindMaxAndMin+0x30>

			SpO2IRMax = SpO2IRLedSignal.Result;							//store new max values
 8002a10:	4b30      	ldr	r3, [pc, #192]	; (8002ad4 <FindMaxAndMin+0xdc>)
 8002a12:	8a9a      	ldrh	r2, [r3, #20]
 8002a14:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <FindMaxAndMin+0xe0>)
 8002a16:	801a      	strh	r2, [r3, #0]
			SpO2RedMax = SpO2RedLedSignal.Result;
 8002a18:	4b30      	ldr	r3, [pc, #192]	; (8002adc <FindMaxAndMin+0xe4>)
 8002a1a:	8a9a      	ldrh	r2, [r3, #20]
 8002a1c:	4b30      	ldr	r3, [pc, #192]	; (8002ae0 <FindMaxAndMin+0xe8>)
 8002a1e:	801a      	strh	r2, [r3, #0]
			
			comparationWindowTimer = COMPARATION_WINDOW_INTERVAL;		//restart counter				
 8002a20:	4b30      	ldr	r3, [pc, #192]	; (8002ae4 <FindMaxAndMin+0xec>)
 8002a22:	22fa      	movs	r2, #250	; 0xfa
 8002a24:	801a      	strh	r2, [r3, #0]
				SpO2RedMax = SpO2RedMin;
				SpO2_HeartBeatDetected = 1;
			}
		}
	}
}
 8002a26:	e051      	b.n	8002acc <FindMaxAndMin+0xd4>
			comparationWindowTimer--;
 8002a28:	4b2e      	ldr	r3, [pc, #184]	; (8002ae4 <FindMaxAndMin+0xec>)
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	4b2c      	ldr	r3, [pc, #176]	; (8002ae4 <FindMaxAndMin+0xec>)
 8002a32:	801a      	strh	r2, [r3, #0]
			if (comparationWindowTimer == 0){
 8002a34:	4b2b      	ldr	r3, [pc, #172]	; (8002ae4 <FindMaxAndMin+0xec>)
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d147      	bne.n	8002acc <FindMaxAndMin+0xd4>
				subStateFindingMaxAndMin = SPO2_SUBSTATE_FINDING_MIN;
 8002a3c:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <FindMaxAndMin+0xd8>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	701a      	strb	r2, [r3, #0]
				maxCounter++;
 8002a42:	4b29      	ldr	r3, [pc, #164]	; (8002ae8 <FindMaxAndMin+0xf0>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	3301      	adds	r3, #1
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <FindMaxAndMin+0xf0>)
 8002a4c:	701a      	strb	r2, [r3, #0]
				SpO2IRMin = SpO2IRMax;
 8002a4e:	4b22      	ldr	r3, [pc, #136]	; (8002ad8 <FindMaxAndMin+0xe0>)
 8002a50:	881a      	ldrh	r2, [r3, #0]
 8002a52:	4b26      	ldr	r3, [pc, #152]	; (8002aec <FindMaxAndMin+0xf4>)
 8002a54:	801a      	strh	r2, [r3, #0]
				SpO2RedMin = SpO2RedMax;
 8002a56:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <FindMaxAndMin+0xe8>)
 8002a58:	881a      	ldrh	r2, [r3, #0]
 8002a5a:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <FindMaxAndMin+0xf8>)
 8002a5c:	801a      	strh	r2, [r3, #0]
}
 8002a5e:	e035      	b.n	8002acc <FindMaxAndMin+0xd4>
	else if (subStateFindingMaxAndMin == SPO2_SUBSTATE_FINDING_MIN){
 8002a60:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <FindMaxAndMin+0xd8>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d131      	bne.n	8002acc <FindMaxAndMin+0xd4>
		if (SpO2IRLedSignal.Result < SpO2IRMin){
 8002a68:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <FindMaxAndMin+0xdc>)
 8002a6a:	8a9a      	ldrh	r2, [r3, #20]
 8002a6c:	4b1f      	ldr	r3, [pc, #124]	; (8002aec <FindMaxAndMin+0xf4>)
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d20b      	bcs.n	8002a8c <FindMaxAndMin+0x94>
			SpO2IRMin = SpO2IRLedSignal.Result;							//store new min values
 8002a74:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <FindMaxAndMin+0xdc>)
 8002a76:	8a9a      	ldrh	r2, [r3, #20]
 8002a78:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <FindMaxAndMin+0xf4>)
 8002a7a:	801a      	strh	r2, [r3, #0]
			SpO2RedMin = SpO2RedLedSignal.Result;
 8002a7c:	4b17      	ldr	r3, [pc, #92]	; (8002adc <FindMaxAndMin+0xe4>)
 8002a7e:	8a9a      	ldrh	r2, [r3, #20]
 8002a80:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <FindMaxAndMin+0xf8>)
 8002a82:	801a      	strh	r2, [r3, #0]
			comparationWindowTimer = COMPARATION_WINDOW_INTERVAL;		//restart counter
 8002a84:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <FindMaxAndMin+0xec>)
 8002a86:	22fa      	movs	r2, #250	; 0xfa
 8002a88:	801a      	strh	r2, [r3, #0]
}
 8002a8a:	e01f      	b.n	8002acc <FindMaxAndMin+0xd4>
			comparationWindowTimer--;
 8002a8c:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <FindMaxAndMin+0xec>)
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <FindMaxAndMin+0xec>)
 8002a96:	801a      	strh	r2, [r3, #0]
			if (comparationWindowTimer == 0){
 8002a98:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <FindMaxAndMin+0xec>)
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d115      	bne.n	8002acc <FindMaxAndMin+0xd4>
				subStateFindingMaxAndMin = SPO2_SUBSTATE_FINDING_MAX;					
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <FindMaxAndMin+0xd8>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
				minCounter++;
 8002aa6:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <FindMaxAndMin+0xfc>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <FindMaxAndMin+0xfc>)
 8002ab0:	701a      	strb	r2, [r3, #0]
				DoCalculations();		//do calculations before updating min and max values
 8002ab2:	f000 f823 	bl	8002afc <DoCalculations>
				SpO2IRMax = SpO2IRMin;
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <FindMaxAndMin+0xf4>)
 8002ab8:	881a      	ldrh	r2, [r3, #0]
 8002aba:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <FindMaxAndMin+0xe0>)
 8002abc:	801a      	strh	r2, [r3, #0]
				SpO2RedMax = SpO2RedMin;
 8002abe:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <FindMaxAndMin+0xf8>)
 8002ac0:	881a      	ldrh	r2, [r3, #0]
 8002ac2:	4b07      	ldr	r3, [pc, #28]	; (8002ae0 <FindMaxAndMin+0xe8>)
 8002ac4:	801a      	strh	r2, [r3, #0]
				SpO2_HeartBeatDetected = 1;
 8002ac6:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <FindMaxAndMin+0x100>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	701a      	strb	r2, [r3, #0]
}
 8002acc:	bf00      	nop
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	200000d8 	.word	0x200000d8
 8002ad4:	20000054 	.word	0x20000054
 8002ad8:	2000009c 	.word	0x2000009c
 8002adc:	2000003c 	.word	0x2000003c
 8002ae0:	200000a0 	.word	0x200000a0
 8002ae4:	200000da 	.word	0x200000da
 8002ae8:	200000ca 	.word	0x200000ca
 8002aec:	2000009e 	.word	0x2000009e
 8002af0:	200000a2 	.word	0x200000a2
 8002af4:	200000cb 	.word	0x200000cb
 8002af8:	200000ee 	.word	0x200000ee

08002afc <DoCalculations>:

/******************************************************************************
*                               Do Calculations
******************************************************************************/

static void DoCalculations(void){
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0

	uint8_t poxInstantaneousHeartRate;
	uint8_t poxInstantaneousSpO2;
	uint8_t i=0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	73bb      	strb	r3, [r7, #14]
	
	uint32_t numerator;
	uint16_t lookUpTableIndex = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	81bb      	strh	r3, [r7, #12]

	IRPeakToPeakVoltage = SpO2IRMax - SpO2IRMin;		//calculate peak to peak voltage
 8002b0a:	4b58      	ldr	r3, [pc, #352]	; (8002c6c <DoCalculations+0x170>)
 8002b0c:	881a      	ldrh	r2, [r3, #0]
 8002b0e:	4b58      	ldr	r3, [pc, #352]	; (8002c70 <DoCalculations+0x174>)
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	4b57      	ldr	r3, [pc, #348]	; (8002c74 <DoCalculations+0x178>)
 8002b18:	801a      	strh	r2, [r3, #0]
	RedPeakToPeakVoltage = SpO2RedMax - SpO2RedMin;
 8002b1a:	4b57      	ldr	r3, [pc, #348]	; (8002c78 <DoCalculations+0x17c>)
 8002b1c:	881a      	ldrh	r2, [r3, #0]
 8002b1e:	4b57      	ldr	r3, [pc, #348]	; (8002c7c <DoCalculations+0x180>)
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	4b56      	ldr	r3, [pc, #344]	; (8002c80 <DoCalculations+0x184>)
 8002b28:	801a      	strh	r2, [r3, #0]
	
	if (IRPeakToPeakVoltage < 2000 && RedPeakToPeakVoltage < 2000 && IRPeakToPeakVoltage > 20 && RedPeakToPeakVoltage >20){
 8002b2a:	4b52      	ldr	r3, [pc, #328]	; (8002c74 <DoCalculations+0x178>)
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002b32:	f080 8089 	bcs.w	8002c48 <DoCalculations+0x14c>
 8002b36:	4b52      	ldr	r3, [pc, #328]	; (8002c80 <DoCalculations+0x184>)
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002b3e:	f080 8083 	bcs.w	8002c48 <DoCalculations+0x14c>
 8002b42:	4b4c      	ldr	r3, [pc, #304]	; (8002c74 <DoCalculations+0x178>)
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	2b14      	cmp	r3, #20
 8002b48:	d97e      	bls.n	8002c48 <DoCalculations+0x14c>
 8002b4a:	4b4d      	ldr	r3, [pc, #308]	; (8002c80 <DoCalculations+0x184>)
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	2b14      	cmp	r3, #20
 8002b50:	d97a      	bls.n	8002c48 <DoCalculations+0x14c>

		//calculate Vrms = 0.5*Vpp/sqrt(2)
		numerator = (uint32_t)((uint32_t)IRPeakToPeakVoltage * 707);
 8002b52:	4b48      	ldr	r3, [pc, #288]	; (8002c74 <DoCalculations+0x178>)
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	f240 23c3 	movw	r3, #707	; 0x2c3
 8002b5c:	fb03 f302 	mul.w	r3, r3, r2
 8002b60:	60bb      	str	r3, [r7, #8]
		IrRms = (uint16_t)((uint32_t)(numerator)/(uint32_t)(2*1000));
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	4a47      	ldr	r2, [pc, #284]	; (8002c84 <DoCalculations+0x188>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	09db      	lsrs	r3, r3, #7
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	4b46      	ldr	r3, [pc, #280]	; (8002c88 <DoCalculations+0x18c>)
 8002b70:	801a      	strh	r2, [r3, #0]
		
		numerator = (uint32_t)((uint32_t)RedPeakToPeakVoltage * 707);
 8002b72:	4b43      	ldr	r3, [pc, #268]	; (8002c80 <DoCalculations+0x184>)
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	f240 23c3 	movw	r3, #707	; 0x2c3
 8002b7c:	fb03 f302 	mul.w	r3, r3, r2
 8002b80:	60bb      	str	r3, [r7, #8]
		RedRms = (uint16_t)((uint32_t)(numerator)/(uint32_t)(2*1000));
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	4a3f      	ldr	r2, [pc, #252]	; (8002c84 <DoCalculations+0x188>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	09db      	lsrs	r3, r3, #7
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	4b3f      	ldr	r3, [pc, #252]	; (8002c8c <DoCalculations+0x190>)
 8002b90:	801a      	strh	r2, [r3, #0]
		
		if (RedRms < 1024 && IrRms < 1024){
 8002b92:	4b3e      	ldr	r3, [pc, #248]	; (8002c8c <DoCalculations+0x190>)
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9a:	d24e      	bcs.n	8002c3a <DoCalculations+0x13e>
 8002b9c:	4b3a      	ldr	r3, [pc, #232]	; (8002c88 <DoCalculations+0x18c>)
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba4:	d249      	bcs.n	8002c3a <DoCalculations+0x13e>
	
            lookUpTableIndex = (uint16_t)(RedRms/2);
 8002ba6:	4b39      	ldr	r3, [pc, #228]	; (8002c8c <DoCalculations+0x190>)
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	81bb      	strh	r3, [r7, #12]
			numerator = (uint32_t)((uint32_t)Log10LookUpTable[lookUpTableIndex]*(uint32_t)100);
 8002bae:	89bb      	ldrh	r3, [r7, #12]
 8002bb0:	4a37      	ldr	r2, [pc, #220]	; (8002c90 <DoCalculations+0x194>)
 8002bb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2364      	movs	r3, #100	; 0x64
 8002bba:	fb03 f302 	mul.w	r3, r3, r2
 8002bbe:	60bb      	str	r3, [r7, #8]
			
			lookUpTableIndex = (uint16_t)(IrRms/2);
 8002bc0:	4b31      	ldr	r3, [pc, #196]	; (8002c88 <DoCalculations+0x18c>)
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	085b      	lsrs	r3, r3, #1
 8002bc6:	81bb      	strh	r3, [r7, #12]

			poxInstantaneousSpO2 = (uint8_t) ((uint32_t)(numerator)/(uint32_t)Log10LookUpTable[lookUpTableIndex]);
 8002bc8:	89bb      	ldrh	r3, [r7, #12]
 8002bca:	4a31      	ldr	r2, [pc, #196]	; (8002c90 <DoCalculations+0x194>)
 8002bcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bd8:	73fb      	strb	r3, [r7, #15]
                  
			if (poxInstantaneousSpO2 > 100){
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	2b64      	cmp	r3, #100	; 0x64
 8002bde:	d901      	bls.n	8002be4 <DoCalculations+0xe8>

				poxInstantaneousSpO2 = 100;
 8002be0:	2364      	movs	r3, #100	; 0x64
 8002be2:	73fb      	strb	r3, [r7, #15]
			}
			
			//Calculate instantaneous HR //60000
			poxInstantaneousHeartRate = (uint8_t) (60000 / (SpO2SamplesBetweenPulses));
 8002be4:	4b2b      	ldr	r3, [pc, #172]	; (8002c94 <DoCalculations+0x198>)
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002bee:	fb93 f3f2 	sdiv	r3, r3, r2
 8002bf2:	71fb      	strb	r3, [r7, #7]
			
			//Shift samples of FIFO	
			for (i=OLDEST_ELEMENT; i>NEWEST_ELEMENT; i--){
 8002bf4:	2309      	movs	r3, #9
 8002bf6:	73bb      	strb	r3, [r7, #14]
 8002bf8:	e010      	b.n	8002c1c <DoCalculations+0x120>

				SpO2HeartRateArray[i] = SpO2HeartRateArray[i-1];	
 8002bfa:	7bbb      	ldrb	r3, [r7, #14]
 8002bfc:	7bba      	ldrb	r2, [r7, #14]
 8002bfe:	3a01      	subs	r2, #1
 8002c00:	4925      	ldr	r1, [pc, #148]	; (8002c98 <DoCalculations+0x19c>)
 8002c02:	5c89      	ldrb	r1, [r1, r2]
 8002c04:	4a24      	ldr	r2, [pc, #144]	; (8002c98 <DoCalculations+0x19c>)
 8002c06:	54d1      	strb	r1, [r2, r3]
				SpO2SpO2Array[i] = SpO2SpO2Array[i-1];
 8002c08:	7bbb      	ldrb	r3, [r7, #14]
 8002c0a:	7bba      	ldrb	r2, [r7, #14]
 8002c0c:	3a01      	subs	r2, #1
 8002c0e:	4923      	ldr	r1, [pc, #140]	; (8002c9c <DoCalculations+0x1a0>)
 8002c10:	5c89      	ldrb	r1, [r1, r2]
 8002c12:	4a22      	ldr	r2, [pc, #136]	; (8002c9c <DoCalculations+0x1a0>)
 8002c14:	54d1      	strb	r1, [r2, r3]
			for (i=OLDEST_ELEMENT; i>NEWEST_ELEMENT; i--){
 8002c16:	7bbb      	ldrb	r3, [r7, #14]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	73bb      	strb	r3, [r7, #14]
 8002c1c:	7bbb      	ldrb	r3, [r7, #14]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1eb      	bne.n	8002bfa <DoCalculations+0xfe>
			}
			
			//insert new sample into FIFO
			SpO2HeartRateArray[NEWEST_ELEMENT] = poxInstantaneousHeartRate;
 8002c22:	4a1d      	ldr	r2, [pc, #116]	; (8002c98 <DoCalculations+0x19c>)
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	7013      	strb	r3, [r2, #0]
			SpO2SpO2Array[NEWEST_ELEMENT] = poxInstantaneousSpO2;
 8002c28:	4a1c      	ldr	r2, [pc, #112]	; (8002c9c <DoCalculations+0x1a0>)
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	7013      	strb	r3, [r2, #0]
					
			CalculateHeartRateAndSpO2();		//calculate average of medians
 8002c2e:	f000 f83f 	bl	8002cb0 <CalculateHeartRateAndSpO2>
			
			SpO2SamplesBetweenPulses = 0;		//Restart samples counter 									
 8002c32:	4b18      	ldr	r3, [pc, #96]	; (8002c94 <DoCalculations+0x198>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	801a      	strh	r2, [r3, #0]
		if (RedRms < 1024 && IrRms < 1024){
 8002c38:	e014      	b.n	8002c64 <DoCalculations+0x168>
		}
                
		else{

			SpO2_HeartRate = 0;
 8002c3a:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <DoCalculations+0x1a4>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
			SpO2_SaturationValue = 0;
 8002c40:	4b18      	ldr	r3, [pc, #96]	; (8002ca4 <DoCalculations+0x1a8>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
		if (RedRms < 1024 && IrRms < 1024){
 8002c46:	e00d      	b.n	8002c64 <DoCalculations+0x168>
		}
	}
	else{

		SpO2_HeartRate = 0;
 8002c48:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <DoCalculations+0x1a4>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
		SpO2_SaturationValue = 0;
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <DoCalculations+0x1a8>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
		printf("HeartRate:%dHz\n",0);
 8002c54:	2100      	movs	r1, #0
 8002c56:	4814      	ldr	r0, [pc, #80]	; (8002ca8 <DoCalculations+0x1ac>)
 8002c58:	f000 fce6 	bl	8003628 <iprintf>
		printf("SPO2:%d%%\n",0);
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	4813      	ldr	r0, [pc, #76]	; (8002cac <DoCalculations+0x1b0>)
 8002c60:	f000 fce2 	bl	8003628 <iprintf>
	}
}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	2000009c 	.word	0x2000009c
 8002c70:	2000009e 	.word	0x2000009e
 8002c74:	200000cc 	.word	0x200000cc
 8002c78:	200000a0 	.word	0x200000a0
 8002c7c:	200000a2 	.word	0x200000a2
 8002c80:	200000ce 	.word	0x200000ce
 8002c84:	10624dd3 	.word	0x10624dd3
 8002c88:	200000d0 	.word	0x200000d0
 8002c8c:	200000d2 	.word	0x200000d2
 8002c90:	08003798 	.word	0x08003798
 8002c94:	200000be 	.word	0x200000be
 8002c98:	200000a8 	.word	0x200000a8
 8002c9c:	200000b4 	.word	0x200000b4
 8002ca0:	200000e0 	.word	0x200000e0
 8002ca4:	200000e1 	.word	0x200000e1
 8002ca8:	08003720 	.word	0x08003720
 8002cac:	08003730 	.word	0x08003730

08002cb0 <CalculateHeartRateAndSpO2>:

/******************************************************************************
*                          Calculate HR and SpO2
******************************************************************************/

static void CalculateHeartRateAndSpO2(void){
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
	uint8_t tempStoreValue;
	uint16_t sum;
	uint8_t i;
	
	//Create a copy of the arrays
	for (i=0; i<SPO2_ARRAY_LENGTH; i++){
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	707b      	strb	r3, [r7, #1]
 8002cba:	e00e      	b.n	8002cda <CalculateHeartRateAndSpO2+0x2a>

		CopyOfSpO2HeartRateArray[i] = SpO2HeartRateArray[i];		
 8002cbc:	787b      	ldrb	r3, [r7, #1]
 8002cbe:	787a      	ldrb	r2, [r7, #1]
 8002cc0:	4957      	ldr	r1, [pc, #348]	; (8002e20 <CalculateHeartRateAndSpO2+0x170>)
 8002cc2:	5c89      	ldrb	r1, [r1, r2]
 8002cc4:	4a57      	ldr	r2, [pc, #348]	; (8002e24 <CalculateHeartRateAndSpO2+0x174>)
 8002cc6:	54d1      	strb	r1, [r2, r3]
		CopyOfSpO2SpO2Array[i] = SpO2SpO2Array[i];
 8002cc8:	787b      	ldrb	r3, [r7, #1]
 8002cca:	787a      	ldrb	r2, [r7, #1]
 8002ccc:	4956      	ldr	r1, [pc, #344]	; (8002e28 <CalculateHeartRateAndSpO2+0x178>)
 8002cce:	5c89      	ldrb	r1, [r1, r2]
 8002cd0:	4a56      	ldr	r2, [pc, #344]	; (8002e2c <CalculateHeartRateAndSpO2+0x17c>)
 8002cd2:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<SPO2_ARRAY_LENGTH; i++){
 8002cd4:	787b      	ldrb	r3, [r7, #1]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	707b      	strb	r3, [r7, #1]
 8002cda:	787b      	ldrb	r3, [r7, #1]
 8002cdc:	2b09      	cmp	r3, #9
 8002cde:	d9ed      	bls.n	8002cbc <CalculateHeartRateAndSpO2+0xc>
	}
	
	// Order array values in ascending order 
	for (startIndex = 0; startIndex < SPO2_ARRAY_LENGTH; startIndex++){
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	71fb      	strb	r3, [r7, #7]
 8002ce4:	e026      	b.n	8002d34 <CalculateHeartRateAndSpO2+0x84>

		smallestIndex = startIndex;
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	71bb      	strb	r3, [r7, #6]

		for (currentIndex = startIndex + 1; currentIndex < SPO2_ARRAY_LENGTH; currentIndex++){
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	3301      	adds	r3, #1
 8002cee:	717b      	strb	r3, [r7, #5]
 8002cf0:	e00c      	b.n	8002d0c <CalculateHeartRateAndSpO2+0x5c>

			if (CopyOfSpO2HeartRateArray[currentIndex] < CopyOfSpO2HeartRateArray[smallestIndex]){
 8002cf2:	797b      	ldrb	r3, [r7, #5]
 8002cf4:	4a4b      	ldr	r2, [pc, #300]	; (8002e24 <CalculateHeartRateAndSpO2+0x174>)
 8002cf6:	5cd2      	ldrb	r2, [r2, r3]
 8002cf8:	79bb      	ldrb	r3, [r7, #6]
 8002cfa:	494a      	ldr	r1, [pc, #296]	; (8002e24 <CalculateHeartRateAndSpO2+0x174>)
 8002cfc:	5ccb      	ldrb	r3, [r1, r3]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d201      	bcs.n	8002d06 <CalculateHeartRateAndSpO2+0x56>

				smallestIndex = currentIndex;
 8002d02:	797b      	ldrb	r3, [r7, #5]
 8002d04:	71bb      	strb	r3, [r7, #6]
		for (currentIndex = startIndex + 1; currentIndex < SPO2_ARRAY_LENGTH; currentIndex++){
 8002d06:	797b      	ldrb	r3, [r7, #5]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	717b      	strb	r3, [r7, #5]
 8002d0c:	797b      	ldrb	r3, [r7, #5]
 8002d0e:	2b09      	cmp	r3, #9
 8002d10:	d9ef      	bls.n	8002cf2 <CalculateHeartRateAndSpO2+0x42>
			}
		}

		tempStoreValue = (uint8_t) CopyOfSpO2HeartRateArray[startIndex];
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	4a43      	ldr	r2, [pc, #268]	; (8002e24 <CalculateHeartRateAndSpO2+0x174>)
 8002d16:	5cd3      	ldrb	r3, [r2, r3]
 8002d18:	703b      	strb	r3, [r7, #0]

		CopyOfSpO2HeartRateArray[startIndex] = CopyOfSpO2HeartRateArray[smallestIndex];
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	79ba      	ldrb	r2, [r7, #6]
 8002d1e:	4941      	ldr	r1, [pc, #260]	; (8002e24 <CalculateHeartRateAndSpO2+0x174>)
 8002d20:	5c89      	ldrb	r1, [r1, r2]
 8002d22:	4a40      	ldr	r2, [pc, #256]	; (8002e24 <CalculateHeartRateAndSpO2+0x174>)
 8002d24:	54d1      	strb	r1, [r2, r3]
		CopyOfSpO2HeartRateArray[smallestIndex] = tempStoreValue;
 8002d26:	79bb      	ldrb	r3, [r7, #6]
 8002d28:	493e      	ldr	r1, [pc, #248]	; (8002e24 <CalculateHeartRateAndSpO2+0x174>)
 8002d2a:	783a      	ldrb	r2, [r7, #0]
 8002d2c:	54ca      	strb	r2, [r1, r3]
	for (startIndex = 0; startIndex < SPO2_ARRAY_LENGTH; startIndex++){
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	3301      	adds	r3, #1
 8002d32:	71fb      	strb	r3, [r7, #7]
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	2b09      	cmp	r3, #9
 8002d38:	d9d5      	bls.n	8002ce6 <CalculateHeartRateAndSpO2+0x36>
	//	 		 	                  		  [0,1,2,3,4,5,6,7] 
	//										   | |         | |
	//										   | |         | |
	//									remove - -         - -
	
	sum = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	807b      	strh	r3, [r7, #2]
	
	for (i = 2; i < 6; i++){
 8002d3e:	2302      	movs	r3, #2
 8002d40:	707b      	strb	r3, [r7, #1]
 8002d42:	e009      	b.n	8002d58 <CalculateHeartRateAndSpO2+0xa8>

		sum += CopyOfSpO2HeartRateArray[i];
 8002d44:	787b      	ldrb	r3, [r7, #1]
 8002d46:	4a37      	ldr	r2, [pc, #220]	; (8002e24 <CalculateHeartRateAndSpO2+0x174>)
 8002d48:	5cd3      	ldrb	r3, [r2, r3]
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	887b      	ldrh	r3, [r7, #2]
 8002d4e:	4413      	add	r3, r2
 8002d50:	807b      	strh	r3, [r7, #2]
	for (i = 2; i < 6; i++){
 8002d52:	787b      	ldrb	r3, [r7, #1]
 8002d54:	3301      	adds	r3, #1
 8002d56:	707b      	strb	r3, [r7, #1]
 8002d58:	787b      	ldrb	r3, [r7, #1]
 8002d5a:	2b05      	cmp	r3, #5
 8002d5c:	d9f2      	bls.n	8002d44 <CalculateHeartRateAndSpO2+0x94>
	}

	SpO2_HeartRate = (uint8_t)(sum / 4);
 8002d5e:	887b      	ldrh	r3, [r7, #2]
 8002d60:	089b      	lsrs	r3, r3, #2
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	4b32      	ldr	r3, [pc, #200]	; (8002e30 <CalculateHeartRateAndSpO2+0x180>)
 8002d68:	701a      	strb	r2, [r3, #0]
	
	//Same procedure, but with SpO2 array
	
	
	// Order array values in ascending order 
	for (startIndex = 0; startIndex < SPO2_ARRAY_LENGTH; startIndex++){
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	71fb      	strb	r3, [r7, #7]
 8002d6e:	e026      	b.n	8002dbe <CalculateHeartRateAndSpO2+0x10e>

		smallestIndex = startIndex;
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	71bb      	strb	r3, [r7, #6]

		for (currentIndex = startIndex + 1; currentIndex < SPO2_ARRAY_LENGTH; currentIndex++){
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	3301      	adds	r3, #1
 8002d78:	717b      	strb	r3, [r7, #5]
 8002d7a:	e00c      	b.n	8002d96 <CalculateHeartRateAndSpO2+0xe6>

			if (CopyOfSpO2SpO2Array[currentIndex] < CopyOfSpO2SpO2Array[smallestIndex]){
 8002d7c:	797b      	ldrb	r3, [r7, #5]
 8002d7e:	4a2b      	ldr	r2, [pc, #172]	; (8002e2c <CalculateHeartRateAndSpO2+0x17c>)
 8002d80:	5cd2      	ldrb	r2, [r2, r3]
 8002d82:	79bb      	ldrb	r3, [r7, #6]
 8002d84:	4929      	ldr	r1, [pc, #164]	; (8002e2c <CalculateHeartRateAndSpO2+0x17c>)
 8002d86:	5ccb      	ldrb	r3, [r1, r3]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d201      	bcs.n	8002d90 <CalculateHeartRateAndSpO2+0xe0>

				smallestIndex = currentIndex;
 8002d8c:	797b      	ldrb	r3, [r7, #5]
 8002d8e:	71bb      	strb	r3, [r7, #6]
		for (currentIndex = startIndex + 1; currentIndex < SPO2_ARRAY_LENGTH; currentIndex++){
 8002d90:	797b      	ldrb	r3, [r7, #5]
 8002d92:	3301      	adds	r3, #1
 8002d94:	717b      	strb	r3, [r7, #5]
 8002d96:	797b      	ldrb	r3, [r7, #5]
 8002d98:	2b09      	cmp	r3, #9
 8002d9a:	d9ef      	bls.n	8002d7c <CalculateHeartRateAndSpO2+0xcc>
			}
		}

		tempStoreValue = (uint8_t) CopyOfSpO2SpO2Array[startIndex];
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	4a23      	ldr	r2, [pc, #140]	; (8002e2c <CalculateHeartRateAndSpO2+0x17c>)
 8002da0:	5cd3      	ldrb	r3, [r2, r3]
 8002da2:	703b      	strb	r3, [r7, #0]

		CopyOfSpO2SpO2Array[startIndex] = CopyOfSpO2SpO2Array[smallestIndex];
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	79ba      	ldrb	r2, [r7, #6]
 8002da8:	4920      	ldr	r1, [pc, #128]	; (8002e2c <CalculateHeartRateAndSpO2+0x17c>)
 8002daa:	5c89      	ldrb	r1, [r1, r2]
 8002dac:	4a1f      	ldr	r2, [pc, #124]	; (8002e2c <CalculateHeartRateAndSpO2+0x17c>)
 8002dae:	54d1      	strb	r1, [r2, r3]
		CopyOfSpO2SpO2Array[smallestIndex] = tempStoreValue;
 8002db0:	79bb      	ldrb	r3, [r7, #6]
 8002db2:	491e      	ldr	r1, [pc, #120]	; (8002e2c <CalculateHeartRateAndSpO2+0x17c>)
 8002db4:	783a      	ldrb	r2, [r7, #0]
 8002db6:	54ca      	strb	r2, [r1, r3]
	for (startIndex = 0; startIndex < SPO2_ARRAY_LENGTH; startIndex++){
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	71fb      	strb	r3, [r7, #7]
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	2b09      	cmp	r3, #9
 8002dc2:	d9d5      	bls.n	8002d70 <CalculateHeartRateAndSpO2+0xc0>
	//	 		 	                  		  [0,1,2,3,4,5,6,7] 
	//										   | |         | |
	//										   | |         | |
	//									remove - -         - -
	
	sum = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	807b      	strh	r3, [r7, #2]
	
	for (i = 2; i < 6; i++){
 8002dc8:	2302      	movs	r3, #2
 8002dca:	707b      	strb	r3, [r7, #1]
 8002dcc:	e009      	b.n	8002de2 <CalculateHeartRateAndSpO2+0x132>

		sum += CopyOfSpO2SpO2Array[i];
 8002dce:	787b      	ldrb	r3, [r7, #1]
 8002dd0:	4a16      	ldr	r2, [pc, #88]	; (8002e2c <CalculateHeartRateAndSpO2+0x17c>)
 8002dd2:	5cd3      	ldrb	r3, [r2, r3]
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	887b      	ldrh	r3, [r7, #2]
 8002dd8:	4413      	add	r3, r2
 8002dda:	807b      	strh	r3, [r7, #2]
	for (i = 2; i < 6; i++){
 8002ddc:	787b      	ldrb	r3, [r7, #1]
 8002dde:	3301      	adds	r3, #1
 8002de0:	707b      	strb	r3, [r7, #1]
 8002de2:	787b      	ldrb	r3, [r7, #1]
 8002de4:	2b05      	cmp	r3, #5
 8002de6:	d9f2      	bls.n	8002dce <CalculateHeartRateAndSpO2+0x11e>
	}

	SpO2_SaturationValue = (uint8_t)(sum / 4);
 8002de8:	887b      	ldrh	r3, [r7, #2]
 8002dea:	089b      	lsrs	r3, r3, #2
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <CalculateHeartRateAndSpO2+0x184>)
 8002df2:	701a      	strb	r2, [r3, #0]
	
	printf("HeartRate:%dHz\n",SpO2_HeartRate);
 8002df4:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <CalculateHeartRateAndSpO2+0x180>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	4619      	mov	r1, r3
 8002dfa:	480f      	ldr	r0, [pc, #60]	; (8002e38 <CalculateHeartRateAndSpO2+0x188>)
 8002dfc:	f000 fc14 	bl	8003628 <iprintf>
	printf("SPO2:%d%%\n",SpO2_SaturationValue);
 8002e00:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <CalculateHeartRateAndSpO2+0x184>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	4619      	mov	r1, r3
 8002e06:	480d      	ldr	r0, [pc, #52]	; (8002e3c <CalculateHeartRateAndSpO2+0x18c>)
 8002e08:	f000 fc0e 	bl	8003628 <iprintf>

	SpO2ValidValue++;
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <CalculateHeartRateAndSpO2+0x190>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	3301      	adds	r3, #1
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <CalculateHeartRateAndSpO2+0x190>)
 8002e16:	701a      	strb	r2, [r3, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	200000a8 	.word	0x200000a8
 8002e24:	200000f4 	.word	0x200000f4
 8002e28:	200000b4 	.word	0x200000b4
 8002e2c:	200000e4 	.word	0x200000e4
 8002e30:	200000e0 	.word	0x200000e0
 8002e34:	200000e1 	.word	0x200000e1
 8002e38:	08003720 	.word	0x08003720
 8002e3c:	08003730 	.word	0x08003730
 8002e40:	200000a4 	.word	0x200000a4

08002e44 <SPO2ResetVariables>:

/******************************************************************************
*                                 Reset Variables
******************************************************************************/

void SPO2ResetVariables(void){
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0

	uint8_t i = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	71fb      	strb	r3, [r7, #7]
	
	//Reset variables
	SpO2IRMax = 0;
 8002e4e:	4b1f      	ldr	r3, [pc, #124]	; (8002ecc <SPO2ResetVariables+0x88>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	801a      	strh	r2, [r3, #0]
	SpO2IRMin = 4096;
 8002e54:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <SPO2ResetVariables+0x8c>)
 8002e56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e5a:	801a      	strh	r2, [r3, #0]
	
	SpO2RedMax = 0;
 8002e5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <SPO2ResetVariables+0x90>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	801a      	strh	r2, [r3, #0]
	SpO2RedMin = 4096;
 8002e62:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <SPO2ResetVariables+0x94>)
 8002e64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e68:	801a      	strh	r2, [r3, #0]

	SpO2SamplesBetweenPulses = 0;
 8002e6a:	4b1c      	ldr	r3, [pc, #112]	; (8002edc <SPO2ResetVariables+0x98>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	801a      	strh	r2, [r3, #0]
	
	CurrentRedValue = INITIAL_CURRENT;
 8002e70:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <SPO2ResetVariables+0x9c>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	801a      	strh	r2, [r3, #0]
	CurrentIRValue = INITIAL_CURRENT;
 8002e76:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <SPO2ResetVariables+0xa0>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	801a      	strh	r2, [r3, #0]
	
	SpO2ValidValue = 0;
 8002e7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <SPO2ResetVariables+0xa4>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
		
	SpO2ActualSubStateSubState = 0;	
 8002e82:	4b1a      	ldr	r3, [pc, #104]	; (8002eec <SPO2ResetVariables+0xa8>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]
		
	TimerToRecalibrate = 0;
 8002e88:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <SPO2ResetVariables+0xac>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	801a      	strh	r2, [r3, #0]
	

	//clean arrays
	for (i=0; i<SPO2_ARRAY_LENGTH; i++){
 8002e8e:	2300      	movs	r3, #0
 8002e90:	71fb      	strb	r3, [r7, #7]
 8002e92:	e012      	b.n	8002eba <SPO2ResetVariables+0x76>

		CopyOfSpO2HeartRateArray[i] = 0;
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	4a17      	ldr	r2, [pc, #92]	; (8002ef4 <SPO2ResetVariables+0xb0>)
 8002e98:	2100      	movs	r1, #0
 8002e9a:	54d1      	strb	r1, [r2, r3]
		CopyOfSpO2SpO2Array[i] = 0;
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	4a16      	ldr	r2, [pc, #88]	; (8002ef8 <SPO2ResetVariables+0xb4>)
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	54d1      	strb	r1, [r2, r3]
		
		SpO2HeartRateArray[i] = 0;
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	4a15      	ldr	r2, [pc, #84]	; (8002efc <SPO2ResetVariables+0xb8>)
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	54d1      	strb	r1, [r2, r3]
		SpO2SpO2Array[i] = 0;
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	4a14      	ldr	r2, [pc, #80]	; (8002f00 <SPO2ResetVariables+0xbc>)
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<SPO2_ARRAY_LENGTH; i++){
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	71fb      	strb	r3, [r7, #7]
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	2b09      	cmp	r3, #9
 8002ebe:	d9e9      	bls.n	8002e94 <SPO2ResetVariables+0x50>
	}
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	2000009c 	.word	0x2000009c
 8002ed0:	2000009e 	.word	0x2000009e
 8002ed4:	200000a0 	.word	0x200000a0
 8002ed8:	200000a2 	.word	0x200000a2
 8002edc:	200000be 	.word	0x200000be
 8002ee0:	200000c6 	.word	0x200000c6
 8002ee4:	200000c8 	.word	0x200000c8
 8002ee8:	200000a4 	.word	0x200000a4
 8002eec:	200000c0 	.word	0x200000c0
 8002ef0:	200000c4 	.word	0x200000c4
 8002ef4:	200000f4 	.word	0x200000f4
 8002ef8:	200000e4 	.word	0x200000e4
 8002efc:	200000a8 	.word	0x200000a8
 8002f00:	200000b4 	.word	0x200000b4

08002f04 <InitUSART>:
* \version 0.0.1
*
* \date 02.01.2019 Function created
*
*******************************************************************************/
void InitUSART(void){
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0

	USART_InitTypeDef USART_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable GPIO clock */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	2008      	movs	r0, #8
 8002f0e:	f7fe f8db 	bl	80010c8 <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8002f12:	2101      	movs	r1, #1
 8002f14:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002f18:	f7fe f8f6 	bl	8001108 <RCC_APB1PeriphClockCmd>

	/* Connect PXx to USARTx_Tx*/
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_USART3);
 8002f1c:	2207      	movs	r2, #7
 8002f1e:	2108      	movs	r1, #8
 8002f20:	481d      	ldr	r0, [pc, #116]	; (8002f98 <InitUSART+0x94>)
 8002f22:	f7fd feed 	bl	8000d00 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3);
 8002f26:	2207      	movs	r2, #7
 8002f28:	2109      	movs	r1, #9
 8002f2a:	481b      	ldr	r0, [pc, #108]	; (8002f98 <InitUSART+0x94>)
 8002f2c:	f7fd fee8 	bl	8000d00 <GPIO_PinAFConfig>

	/* Configure USART Tx as alternate function  */
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002f30:	2300      	movs	r3, #0
 8002f32:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002f34:	2301      	movs	r3, #1
 8002f36:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	713b      	strb	r3, [r7, #4]

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8002f3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f40:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002f42:	2302      	movs	r3, #2
 8002f44:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002f46:	463b      	mov	r3, r7
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4813      	ldr	r0, [pc, #76]	; (8002f98 <InitUSART+0x94>)
 8002f4c:	f7fd fe2c 	bl	8000ba8 <GPIO_Init>

	/* Configure USART Rx as alternate function  */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8002f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f54:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002f56:	463b      	mov	r3, r7
 8002f58:	4619      	mov	r1, r3
 8002f5a:	480f      	ldr	r0, [pc, #60]	; (8002f98 <InitUSART+0x94>)
 8002f5c:	f7fd fe24 	bl	8000ba8 <GPIO_Init>

	USART_InitStructure.USART_BaudRate = 115200;
 8002f60:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002f64:	60bb      	str	r3, [r7, #8]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8002f66:	2300      	movs	r3, #0
 8002f68:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8002f72:	2300      	movs	r3, #0
 8002f74:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002f76:	230c      	movs	r3, #12
 8002f78:	827b      	strh	r3, [r7, #18]

	USART_Init(USART3,&USART_InitStructure);
 8002f7a:	f107 0308 	add.w	r3, r7, #8
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4806      	ldr	r0, [pc, #24]	; (8002f9c <InitUSART+0x98>)
 8002f82:	f7fe fa17 	bl	80013b4 <USART_Init>

	/* Enable USART */
	USART_Cmd(USART3, ENABLE);
 8002f86:	2101      	movs	r1, #1
 8002f88:	4804      	ldr	r0, [pc, #16]	; (8002f9c <InitUSART+0x98>)
 8002f8a:	f7fe facd 	bl	8001528 <USART_Cmd>

}
 8002f8e:	bf00      	nop
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40020c00 	.word	0x40020c00
 8002f9c:	40004800 	.word	0x40004800

08002fa0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */
  USART_SendData(USART3, (uint8_t) ch);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4807      	ldr	r0, [pc, #28]	; (8002fd0 <__io_putchar+0x30>)
 8002fb2:	f7fe fad9 	bl	8001568 <USART_SendData>

  /* Loop until the end of transmission */
  while (USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET)
 8002fb6:	bf00      	nop
 8002fb8:	2140      	movs	r1, #64	; 0x40
 8002fba:	4805      	ldr	r0, [pc, #20]	; (8002fd0 <__io_putchar+0x30>)
 8002fbc:	f7fe fae6 	bl	800158c <USART_GetFlagStatus>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f8      	beq.n	8002fb8 <__io_putchar+0x18>
  {}

  return ch;
 8002fc6:	687b      	ldr	r3, [r7, #4]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40004800 	.word	0x40004800

08002fd4 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af00      	add	r7, sp, #0
	unsigned long i = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]

  /* Initialize system */
  SystemInit();
 8002fde:	f000 f8fd 	bl	80031dc <SystemInit>

  InitUSART();
 8002fe2:	f7ff ff8f 	bl	8002f04 <InitUSART>
  InitDAC();
 8002fe6:	f7fe fc03 	bl	80017f0 <InitDAC>
  InitADS1115();
 8002fea:	f7fe faeb 	bl	80015c4 <InitADS1115>
  SPO2ResetVariables();
 8002fee:	f7ff ff29 	bl	8002e44 <SPO2ResetVariables>

  GPIO_InitTypeDef GPIO_InitStructure;
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	2008      	movs	r0, #8
 8002ff6:	f7fe f867 	bl	80010c8 <RCC_AHB1PeriphClockCmd>

  /*enable LED on disco*/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 8002ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8003000:	2301      	movs	r3, #1
 8003002:	763b      	strb	r3, [r7, #24]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003004:	2300      	movs	r3, #0
 8003006:	76bb      	strb	r3, [r7, #26]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003008:	2300      	movs	r3, #0
 800300a:	76fb      	strb	r3, [r7, #27]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800300c:	2303      	movs	r3, #3
 800300e:	767b      	strb	r3, [r7, #25]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	4619      	mov	r1, r3
 8003016:	4823      	ldr	r0, [pc, #140]	; (80030a4 <main+0xd0>)
 8003018:	f7fd fdc6 	bl	8000ba8 <GPIO_Init>

  TIM_TimeBaseInitTypeDef TIM_TimeBaseStruct;
  NVIC_InitTypeDef  NVIC_InitStruct;

  /*Clock source for TIM1 and TIM8*/
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 800301c:	2101      	movs	r1, #1
 800301e:	2001      	movs	r0, #1
 8003020:	f7fe f892 	bl	8001148 <RCC_APB2PeriphClockCmd>

  /*Timer to reset the cranking*/
  TIM_TimeBaseStructInit(&TIM_TimeBaseStruct);
 8003024:	f107 0308 	add.w	r3, r7, #8
 8003028:	4618      	mov	r0, r3
 800302a:	f7fe f919 	bl	8001260 <TIM_TimeBaseStructInit>
  TIM_TimeBaseStruct.TIM_Period = 420-1; // 100kHz
 800302e:	f240 13a3 	movw	r3, #419	; 0x1a3
 8003032:	60fb      	str	r3, [r7, #12]
  TIM_TimeBaseStruct.TIM_Prescaler = 0; // 42MHz
 8003034:	2300      	movs	r3, #0
 8003036:	813b      	strh	r3, [r7, #8]
  TIM_TimeBaseStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 8003038:	2300      	movs	r3, #0
 800303a:	823b      	strh	r3, [r7, #16]
  TIM_TimeBaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 800303c:	2300      	movs	r3, #0
 800303e:	817b      	strh	r3, [r7, #10]
  TIM_TimeBaseStruct.TIM_RepetitionCounter = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	74bb      	strb	r3, [r7, #18]
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStruct);
 8003044:	f107 0308 	add.w	r3, r7, #8
 8003048:	4619      	mov	r1, r3
 800304a:	4817      	ldr	r0, [pc, #92]	; (80030a8 <main+0xd4>)
 800304c:	f7fe f89c 	bl	8001188 <TIM_TimeBaseInit>

  /* Clear update interrupt bit*/
  TIM_ClearITPendingBit(TIM1, TIM1_UP_TIM10_IRQn);
 8003050:	2119      	movs	r1, #25
 8003052:	4815      	ldr	r0, [pc, #84]	; (80030a8 <main+0xd4>)
 8003054:	f7fe f99d 	bl	8001392 <TIM_ClearITPendingBit>

  /*Enable Timer Interrupt*/
  TIM_ITConfig(TIM1, TIM_IT_Update, ENABLE);
 8003058:	2201      	movs	r2, #1
 800305a:	2101      	movs	r1, #1
 800305c:	4812      	ldr	r0, [pc, #72]	; (80030a8 <main+0xd4>)
 800305e:	f7fe f939 	bl	80012d4 <TIM_ITConfig>

  /* TIM1 counter disable */
  TIM_Cmd(TIM1, ENABLE);
 8003062:	2101      	movs	r1, #1
 8003064:	4810      	ldr	r0, [pc, #64]	; (80030a8 <main+0xd4>)
 8003066:	f7fe f915 	bl	8001294 <TIM_Cmd>

  /*Enable TIM1 IRQ*/
  NVIC_InitStruct.NVIC_IRQChannel = TIM1_UP_TIM10_IRQn;
 800306a:	2319      	movs	r3, #25
 800306c:	713b      	strb	r3, [r7, #4]
  NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 4;
 800306e:	2304      	movs	r3, #4
 8003070:	717b      	strb	r3, [r7, #5]
  NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8003072:	2300      	movs	r3, #0
 8003074:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8003076:	2301      	movs	r3, #1
 8003078:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStruct);
 800307a:	1d3b      	adds	r3, r7, #4
 800307c:	4618      	mov	r0, r3
 800307e:	f7fd fb03 	bl	8000688 <NVIC_Init>

  printf("Value baseline IR, Value IR, Value baseline Red, Value Red\n\r");
 8003082:	480a      	ldr	r0, [pc, #40]	; (80030ac <main+0xd8>)
 8003084:	f000 fad0 	bl	8003628 <iprintf>
  printf("ADC step size is 125uV\n\r");
 8003088:	4809      	ldr	r0, [pc, #36]	; (80030b0 <main+0xdc>)
 800308a:	f000 facd 	bl	8003628 <iprintf>


  /* Infinite loop */
  while (1)
  {
	  if(Updateflag == 1){
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <main+0xe0>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d1fb      	bne.n	800308e <main+0xba>
		  SPO2Measuring();
 8003096:	f7fe ff8d 	bl	8001fb4 <SPO2Measuring>
		  Updateflag = 0;
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <main+0xe0>)
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
	  if(Updateflag == 1){
 80030a0:	e7f5      	b.n	800308e <main+0xba>
 80030a2:	bf00      	nop
 80030a4:	40020c00 	.word	0x40020c00
 80030a8:	40010000 	.word	0x40010000
 80030ac:	0800373c 	.word	0x0800373c
 80030b0:	0800377c 	.word	0x0800377c
 80030b4:	200000dc 	.word	0x200000dc

080030b8 <TIM1_UP_TIM10_IRQHandler>:
	  }
  }
}

void TIM1_UP_TIM10_IRQHandler(void){
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0

	if(TIM_GetITStatus(TIM1,TIM_IT_Update)){
 80030bc:	2101      	movs	r1, #1
 80030be:	480a      	ldr	r0, [pc, #40]	; (80030e8 <TIM1_UP_TIM10_IRQHandler+0x30>)
 80030c0:	f7fe f93d 	bl	800133e <TIM_GetITStatus>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d007      	beq.n	80030da <TIM1_UP_TIM10_IRQHandler+0x22>

		ElapsedTimeIn_us++;
 80030ca:	4b08      	ldr	r3, [pc, #32]	; (80030ec <TIM1_UP_TIM10_IRQHandler+0x34>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	3301      	adds	r3, #1
 80030d0:	4a06      	ldr	r2, [pc, #24]	; (80030ec <TIM1_UP_TIM10_IRQHandler+0x34>)
 80030d2:	6013      	str	r3, [r2, #0]
		Updateflag = 1;
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <TIM1_UP_TIM10_IRQHandler+0x38>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]
	}
	TIM_ClearFlag(TIM1,TIM_FLAG_Update);
 80030da:	2101      	movs	r1, #1
 80030dc:	4802      	ldr	r0, [pc, #8]	; (80030e8 <TIM1_UP_TIM10_IRQHandler+0x30>)
 80030de:	f7fe f91d 	bl	800131c <TIM_ClearFlag>
}
 80030e2:	bf00      	nop
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40010000 	.word	0x40010000
 80030ec:	200000f0 	.word	0x200000f0
 80030f0:	200000dc 	.word	0x200000dc

080030f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80030f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800312c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80030f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80030fa:	e003      	b.n	8003104 <LoopCopyDataInit>

080030fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80030fc:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80030fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003100:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003102:	3104      	adds	r1, #4

08003104 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003104:	480b      	ldr	r0, [pc, #44]	; (8003134 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003106:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003108:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800310a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800310c:	d3f6      	bcc.n	80030fc <CopyDataInit>
  ldr  r2, =_sbss
 800310e:	4a0b      	ldr	r2, [pc, #44]	; (800313c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003110:	e002      	b.n	8003118 <LoopFillZerobss>

08003112 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003112:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003114:	f842 3b04 	str.w	r3, [r2], #4

08003118 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003118:	4b09      	ldr	r3, [pc, #36]	; (8003140 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800311a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800311c:	d3f9      	bcc.n	8003112 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800311e:	f000 f85d 	bl	80031dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003122:	f000 facb 	bl	80036bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003126:	f7ff ff55 	bl	8002fd4 <main>
  bx  lr    
 800312a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800312c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003130:	08003ba0 	.word	0x08003ba0
  ldr  r0, =_sdata
 8003134:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003138:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 800313c:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8003140:	20000100 	.word	0x20000100

08003144 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003144:	e7fe      	b.n	8003144 <ADC_IRQHandler>

08003146 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003146:	b480      	push	{r7}
 8003148:	af00      	add	r7, sp, #0
}
 800314a:	bf00      	nop
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003158:	e7fe      	b.n	8003158 <HardFault_Handler+0x4>

0800315a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800315a:	b480      	push	{r7}
 800315c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800315e:	e7fe      	b.n	800315e <MemManage_Handler+0x4>

08003160 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003164:	e7fe      	b.n	8003164 <BusFault_Handler+0x4>

08003166 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003166:	b480      	push	{r7}
 8003168:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800316a:	e7fe      	b.n	800316a <UsageFault_Handler+0x4>

0800316c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
}
 8003170:	bf00      	nop
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800317a:	b480      	push	{r7}
 800317c:	af00      	add	r7, sp, #0
}
 800317e:	bf00      	nop
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8003196:	b480      	push	{r7}
 8003198:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800319a:	bf00      	nop
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <_write>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _write(int file, char *ptr, int len)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */

	int i;
	for (i=0; i<len; i++)
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	e009      	b.n	80031ca <_write+0x26>
	{
		__io_putchar(*(ptr++));
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	60ba      	str	r2, [r7, #8]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff feee 	bl	8002fa0 <__io_putchar>
	for (i=0; i<len; i++)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	3301      	adds	r3, #1
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	dbf1      	blt.n	80031b6 <_write+0x12>
	}
	return len;
 80031d2:	687b      	ldr	r3, [r7, #4]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031e0:	4a16      	ldr	r2, [pc, #88]	; (800323c <SystemInit+0x60>)
 80031e2:	4b16      	ldr	r3, [pc, #88]	; (800323c <SystemInit+0x60>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80031f0:	4a13      	ldr	r2, [pc, #76]	; (8003240 <SystemInit+0x64>)
 80031f2:	4b13      	ldr	r3, [pc, #76]	; (8003240 <SystemInit+0x64>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80031fc:	4b10      	ldr	r3, [pc, #64]	; (8003240 <SystemInit+0x64>)
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003202:	4a0f      	ldr	r2, [pc, #60]	; (8003240 <SystemInit+0x64>)
 8003204:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <SystemInit+0x64>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800320c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003210:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003212:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <SystemInit+0x64>)
 8003214:	4a0b      	ldr	r2, [pc, #44]	; (8003244 <SystemInit+0x68>)
 8003216:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003218:	4a09      	ldr	r2, [pc, #36]	; (8003240 <SystemInit+0x64>)
 800321a:	4b09      	ldr	r3, [pc, #36]	; (8003240 <SystemInit+0x64>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003222:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003224:	4b06      	ldr	r3, [pc, #24]	; (8003240 <SystemInit+0x64>)
 8003226:	2200      	movs	r2, #0
 8003228:	60da      	str	r2, [r3, #12]
       
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800322a:	f000 f80d 	bl	8003248 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800322e:	4b03      	ldr	r3, [pc, #12]	; (800323c <SystemInit+0x60>)
 8003230:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003234:	609a      	str	r2, [r3, #8]
#endif
}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	e000ed00 	.word	0xe000ed00
 8003240:	40023800 	.word	0x40023800
 8003244:	24003010 	.word	0x24003010

08003248 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL  used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800324e:	2300      	movs	r3, #0
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	2300      	movs	r3, #0
 8003254:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);
   
#else  /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */
    
    /* Enable HSE */
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003256:	4a35      	ldr	r2, [pc, #212]	; (800332c <SetSysClock+0xe4>)
 8003258:	4b34      	ldr	r3, [pc, #208]	; (800332c <SetSysClock+0xe4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003260:	6013      	str	r3, [r2, #0]
  #endif  /* PLL_SOURCE_HSE_BYPASS */
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003262:	4b32      	ldr	r3, [pc, #200]	; (800332c <SetSysClock+0xe4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3301      	adds	r3, #1
 8003270:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d103      	bne.n	8003280 <SetSysClock+0x38>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800327e:	d1f0      	bne.n	8003262 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003280:	4b2a      	ldr	r3, [pc, #168]	; (800332c <SetSysClock+0xe4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800328c:	2301      	movs	r3, #1
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	e001      	b.n	8003296 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003292:	2300      	movs	r3, #0
 8003294:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d102      	bne.n	80032a2 <SetSysClock+0x5a>
  {

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800329c:	4b23      	ldr	r3, [pc, #140]	; (800332c <SetSysClock+0xe4>)
 800329e:	4a24      	ldr	r2, [pc, #144]	; (8003330 <SetSysClock+0xe8>)
 80032a0:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif  /* PLL_SOURCE_HSI */
  
     /* Select regulator voltage output Scale 2 mode, System frequency up to 84 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80032a2:	4a22      	ldr	r2, [pc, #136]	; (800332c <SetSysClock+0xe4>)
 80032a4:	4b21      	ldr	r3, [pc, #132]	; (800332c <SetSysClock+0xe4>)
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ac:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR &= (uint32_t)~(PWR_CR_VOS);
 80032ae:	4a21      	ldr	r2, [pc, #132]	; (8003334 <SetSysClock+0xec>)
 80032b0:	4b20      	ldr	r3, [pc, #128]	; (8003334 <SetSysClock+0xec>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80032b8:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80032ba:	4a1c      	ldr	r2, [pc, #112]	; (800332c <SetSysClock+0xe4>)
 80032bc:	4b1b      	ldr	r3, [pc, #108]	; (800332c <SetSysClock+0xe4>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 1*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 80032c2:	4a1a      	ldr	r2, [pc, #104]	; (800332c <SetSysClock+0xe4>)
 80032c4:	4b19      	ldr	r3, [pc, #100]	; (800332c <SetSysClock+0xe4>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;  
 80032ca:	4a18      	ldr	r2, [pc, #96]	; (800332c <SetSysClock+0xe4>)
 80032cc:	4b17      	ldr	r3, [pc, #92]	; (800332c <SetSysClock+0xe4>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032d4:	6093      	str	r3, [r2, #8]
 
  /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80032d6:	4a15      	ldr	r2, [pc, #84]	; (800332c <SetSysClock+0xe4>)
 80032d8:	4b14      	ldr	r3, [pc, #80]	; (800332c <SetSysClock+0xe4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80032e2:	bf00      	nop
 80032e4:	4b11      	ldr	r3, [pc, #68]	; (800332c <SetSysClock+0xe4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f9      	beq.n	80032e4 <SetSysClock+0x9c>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 80032f0:	4b11      	ldr	r3, [pc, #68]	; (8003338 <SetSysClock+0xf0>)
 80032f2:	f240 7202 	movw	r2, #1794	; 0x702
 80032f6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80032f8:	4a0c      	ldr	r2, [pc, #48]	; (800332c <SetSysClock+0xe4>)
 80032fa:	4b0c      	ldr	r3, [pc, #48]	; (800332c <SetSysClock+0xe4>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f023 0303 	bic.w	r3, r3, #3
 8003302:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003304:	4a09      	ldr	r2, [pc, #36]	; (800332c <SetSysClock+0xe4>)
 8003306:	4b09      	ldr	r3, [pc, #36]	; (800332c <SetSysClock+0xe4>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f043 0302 	orr.w	r3, r3, #2
 800330e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003310:	bf00      	nop
 8003312:	4b06      	ldr	r3, [pc, #24]	; (800332c <SetSysClock+0xe4>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b08      	cmp	r3, #8
 800331c:	d1f9      	bne.n	8003312 <SetSysClock+0xca>
    {
    }
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40023800 	.word	0x40023800
 8003330:	07415408 	.word	0x07415408
 8003334:	40007000 	.word	0x40007000
 8003338:	40023c00 	.word	0x40023c00

0800333c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
	int div = 1;
 8003348:	2301      	movs	r3, #1
 800334a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800334c:	e004      	b.n	8003358 <ts_itoa+0x1c>
		div *= base;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	fb02 f303 	mul.w	r3, r2, r3
 8003356:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	429a      	cmp	r2, r3
 8003364:	d2f3      	bcs.n	800334e <ts_itoa+0x12>

	while (div != 0)
 8003366:	e029      	b.n	80033bc <ts_itoa+0x80>
	{
		int num = d/div;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003370:	613b      	str	r3, [r7, #16]
		d = d%div;
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	fbb3 f1f2 	udiv	r1, r3, r2
 800337a:	fb02 f201 	mul.w	r2, r2, r1
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	60bb      	str	r3, [r7, #8]
		div /= base;
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	fb92 f3f3 	sdiv	r3, r2, r3
 800338a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b09      	cmp	r3, #9
 8003390:	dd0a      	ble.n	80033a8 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	1c59      	adds	r1, r3, #1
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	6011      	str	r1, [r2, #0]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	3237      	adds	r2, #55	; 0x37
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	701a      	strb	r2, [r3, #0]
 80033a6:	e009      	b.n	80033bc <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	1c59      	adds	r1, r3, #1
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	6011      	str	r1, [r2, #0]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	3230      	adds	r2, #48	; 0x30
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1d2      	bne.n	8003368 <ts_itoa+0x2c>
	}
}
 80033c2:	bf00      	nop
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b088      	sub	sp, #32
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80033de:	e07d      	b.n	80034dc <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b25      	cmp	r3, #37	; 0x25
 80033e6:	d171      	bne.n	80034cc <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	3301      	adds	r3, #1
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b64      	cmp	r3, #100	; 0x64
 80033f4:	d01e      	beq.n	8003434 <ts_formatstring+0x66>
 80033f6:	2b64      	cmp	r3, #100	; 0x64
 80033f8:	dc06      	bgt.n	8003408 <ts_formatstring+0x3a>
 80033fa:	2b58      	cmp	r3, #88	; 0x58
 80033fc:	d050      	beq.n	80034a0 <ts_formatstring+0xd2>
 80033fe:	2b63      	cmp	r3, #99	; 0x63
 8003400:	d00e      	beq.n	8003420 <ts_formatstring+0x52>
 8003402:	2b25      	cmp	r3, #37	; 0x25
 8003404:	d058      	beq.n	80034b8 <ts_formatstring+0xea>
 8003406:	e05d      	b.n	80034c4 <ts_formatstring+0xf6>
 8003408:	2b73      	cmp	r3, #115	; 0x73
 800340a:	d02b      	beq.n	8003464 <ts_formatstring+0x96>
 800340c:	2b73      	cmp	r3, #115	; 0x73
 800340e:	dc02      	bgt.n	8003416 <ts_formatstring+0x48>
 8003410:	2b69      	cmp	r3, #105	; 0x69
 8003412:	d00f      	beq.n	8003434 <ts_formatstring+0x66>
 8003414:	e056      	b.n	80034c4 <ts_formatstring+0xf6>
 8003416:	2b75      	cmp	r3, #117	; 0x75
 8003418:	d037      	beq.n	800348a <ts_formatstring+0xbc>
 800341a:	2b78      	cmp	r3, #120	; 0x78
 800341c:	d040      	beq.n	80034a0 <ts_formatstring+0xd2>
 800341e:	e051      	b.n	80034c4 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	60fa      	str	r2, [r7, #12]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	1d11      	adds	r1, r2, #4
 800342a:	6079      	str	r1, [r7, #4]
 800342c:	6812      	ldr	r2, [r2, #0]
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]
				break;
 8003432:	e047      	b.n	80034c4 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	1d1a      	adds	r2, r3, #4
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	2b00      	cmp	r3, #0
 8003442:	da07      	bge.n	8003454 <ts_formatstring+0x86>
					{
						val *= -1;
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	425b      	negs	r3, r3
 8003448:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	60fa      	str	r2, [r7, #12]
 8003450:	222d      	movs	r2, #45	; 0x2d
 8003452:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8003454:	69f9      	ldr	r1, [r7, #28]
 8003456:	f107 030c 	add.w	r3, r7, #12
 800345a:	220a      	movs	r2, #10
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff ff6d 	bl	800333c <ts_itoa>
				}
				break;
 8003462:	e02f      	b.n	80034c4 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	1d1a      	adds	r2, r3, #4
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	61bb      	str	r3, [r7, #24]
					while (*arg)
 800346e:	e007      	b.n	8003480 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	60fa      	str	r2, [r7, #12]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	1c51      	adds	r1, r2, #1
 800347a:	61b9      	str	r1, [r7, #24]
 800347c:	7812      	ldrb	r2, [r2, #0]
 800347e:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1f3      	bne.n	8003470 <ts_formatstring+0xa2>
					}
				}
				break;
 8003488:	e01c      	b.n	80034c4 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	1d1a      	adds	r2, r3, #4
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	6819      	ldr	r1, [r3, #0]
 8003492:	f107 030c 	add.w	r3, r7, #12
 8003496:	220a      	movs	r2, #10
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ff4f 	bl	800333c <ts_itoa>
				break;
 800349e:	e011      	b.n	80034c4 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	1d1a      	adds	r2, r3, #4
 80034a4:	607a      	str	r2, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4619      	mov	r1, r3
 80034aa:	f107 030c 	add.w	r3, r7, #12
 80034ae:	2210      	movs	r2, #16
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff ff43 	bl	800333c <ts_itoa>
				break;
 80034b6:	e005      	b.n	80034c4 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	60fa      	str	r2, [r7, #12]
 80034be:	2225      	movs	r2, #37	; 0x25
 80034c0:	701a      	strb	r2, [r3, #0]
				  break;
 80034c2:	bf00      	nop
			}
			fmt++;
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	3301      	adds	r3, #1
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	e007      	b.n	80034dc <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	60fa      	str	r2, [r7, #12]
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	1c51      	adds	r1, r2, #1
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	7812      	ldrb	r2, [r2, #0]
 80034da:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f47f af7d 	bne.w	80033e0 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	461a      	mov	r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	1ad3      	subs	r3, r2, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3720      	adds	r7, #32
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
	int length = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 800350a:	e081      	b.n	8003610 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b25      	cmp	r3, #37	; 0x25
 8003512:	d177      	bne.n	8003604 <ts_formatlength+0x108>
		{
			++fmt;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3301      	adds	r3, #1
 8003518:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	3b58      	subs	r3, #88	; 0x58
 8003520:	2b20      	cmp	r3, #32
 8003522:	d86a      	bhi.n	80035fa <ts_formatlength+0xfe>
 8003524:	a201      	add	r2, pc, #4	; (adr r2, 800352c <ts_formatlength+0x30>)
 8003526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352a:	bf00      	nop
 800352c:	080035ed 	.word	0x080035ed
 8003530:	080035fb 	.word	0x080035fb
 8003534:	080035fb 	.word	0x080035fb
 8003538:	080035fb 	.word	0x080035fb
 800353c:	080035fb 	.word	0x080035fb
 8003540:	080035fb 	.word	0x080035fb
 8003544:	080035fb 	.word	0x080035fb
 8003548:	080035fb 	.word	0x080035fb
 800354c:	080035fb 	.word	0x080035fb
 8003550:	080035fb 	.word	0x080035fb
 8003554:	080035fb 	.word	0x080035fb
 8003558:	080035b1 	.word	0x080035b1
 800355c:	080035bf 	.word	0x080035bf
 8003560:	080035fb 	.word	0x080035fb
 8003564:	080035fb 	.word	0x080035fb
 8003568:	080035fb 	.word	0x080035fb
 800356c:	080035fb 	.word	0x080035fb
 8003570:	080035bf 	.word	0x080035bf
 8003574:	080035fb 	.word	0x080035fb
 8003578:	080035fb 	.word	0x080035fb
 800357c:	080035fb 	.word	0x080035fb
 8003580:	080035fb 	.word	0x080035fb
 8003584:	080035fb 	.word	0x080035fb
 8003588:	080035fb 	.word	0x080035fb
 800358c:	080035fb 	.word	0x080035fb
 8003590:	080035fb 	.word	0x080035fb
 8003594:	080035fb 	.word	0x080035fb
 8003598:	080035cd 	.word	0x080035cd
 800359c:	080035fb 	.word	0x080035fb
 80035a0:	080035bf 	.word	0x080035bf
 80035a4:	080035fb 	.word	0x080035fb
 80035a8:	080035fb 	.word	0x080035fb
 80035ac:	080035ed 	.word	0x080035ed
			{
			  case 'c':
		  		  va_arg(va, int);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	3304      	adds	r3, #4
 80035b4:	603b      	str	r3, [r7, #0]
				  ++length;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3301      	adds	r3, #1
 80035ba:	60fb      	str	r3, [r7, #12]
				  break;
 80035bc:	e025      	b.n	800360a <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	330b      	adds	r3, #11
 80035c2:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	3304      	adds	r3, #4
 80035c8:	603b      	str	r3, [r7, #0]
				  break;
 80035ca:	e01e      	b.n	800360a <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	1d1a      	adds	r2, r3, #4
 80035d0:	603a      	str	r2, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80035d6:	e002      	b.n	80035de <ts_formatlength+0xe2>
			  			  ++length;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3301      	adds	r3, #1
 80035dc:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	60ba      	str	r2, [r7, #8]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f6      	bne.n	80035d8 <ts_formatlength+0xdc>
			  	  }
				  break;
 80035ea:	e00e      	b.n	800360a <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3308      	adds	r3, #8
 80035f0:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	3304      	adds	r3, #4
 80035f6:	603b      	str	r3, [r7, #0]
				  break;
 80035f8:	e007      	b.n	800360a <ts_formatlength+0x10e>
			  default:
				  ++length;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	3301      	adds	r3, #1
 80035fe:	60fb      	str	r3, [r7, #12]
				  break;
 8003600:	bf00      	nop
 8003602:	e002      	b.n	800360a <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	3301      	adds	r3, #1
 8003608:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3301      	adds	r3, #1
 800360e:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	f47f af79 	bne.w	800350c <ts_formatlength+0x10>
	}
	return length;
 800361a:	68fb      	ldr	r3, [r7, #12]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8003628:	b40f      	push	{r0, r1, r2, r3}
 800362a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
	int length = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8003636:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800363a:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 800363c:	6839      	ldr	r1, [r7, #0]
 800363e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003640:	f7ff ff5c 	bl	80034fc <ts_formatlength>
 8003644:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8003646:	466b      	mov	r3, sp
 8003648:	461e      	mov	r6, r3
		char buf[length];
 800364a:	68f9      	ldr	r1, [r7, #12]
 800364c:	1e4b      	subs	r3, r1, #1
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	460b      	mov	r3, r1
 8003652:	461a      	mov	r2, r3
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 800365c:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8003660:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8003664:	460b      	mov	r3, r1
 8003666:	461a      	mov	r2, r3
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	00dd      	lsls	r5, r3, #3
 800366e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003672:	00d4      	lsls	r4, r2, #3
 8003674:	460b      	mov	r3, r1
 8003676:	3307      	adds	r3, #7
 8003678:	08db      	lsrs	r3, r3, #3
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	ebad 0d03 	sub.w	sp, sp, r3
 8003680:	466b      	mov	r3, sp
 8003682:	3300      	adds	r3, #0
 8003684:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8003686:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800368a:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff fe9b 	bl	80033ce <ts_formatstring>
 8003698:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4619      	mov	r1, r3
 80036a0:	2001      	movs	r0, #1
 80036a2:	f7ff fd7f 	bl	80031a4 <_write>
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 80036aa:	68fb      	ldr	r3, [r7, #12]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036b6:	b004      	add	sp, #16
 80036b8:	4770      	bx	lr
	...

080036bc <__libc_init_array>:
 80036bc:	b570      	push	{r4, r5, r6, lr}
 80036be:	4e0d      	ldr	r6, [pc, #52]	; (80036f4 <__libc_init_array+0x38>)
 80036c0:	4c0d      	ldr	r4, [pc, #52]	; (80036f8 <__libc_init_array+0x3c>)
 80036c2:	1ba4      	subs	r4, r4, r6
 80036c4:	10a4      	asrs	r4, r4, #2
 80036c6:	2500      	movs	r5, #0
 80036c8:	42a5      	cmp	r5, r4
 80036ca:	d109      	bne.n	80036e0 <__libc_init_array+0x24>
 80036cc:	4e0b      	ldr	r6, [pc, #44]	; (80036fc <__libc_init_array+0x40>)
 80036ce:	4c0c      	ldr	r4, [pc, #48]	; (8003700 <__libc_init_array+0x44>)
 80036d0:	f000 f818 	bl	8003704 <_init>
 80036d4:	1ba4      	subs	r4, r4, r6
 80036d6:	10a4      	asrs	r4, r4, #2
 80036d8:	2500      	movs	r5, #0
 80036da:	42a5      	cmp	r5, r4
 80036dc:	d105      	bne.n	80036ea <__libc_init_array+0x2e>
 80036de:	bd70      	pop	{r4, r5, r6, pc}
 80036e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036e4:	4798      	blx	r3
 80036e6:	3501      	adds	r5, #1
 80036e8:	e7ee      	b.n	80036c8 <__libc_init_array+0xc>
 80036ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036ee:	4798      	blx	r3
 80036f0:	3501      	adds	r5, #1
 80036f2:	e7f2      	b.n	80036da <__libc_init_array+0x1e>
 80036f4:	08003b98 	.word	0x08003b98
 80036f8:	08003b98 	.word	0x08003b98
 80036fc:	08003b98 	.word	0x08003b98
 8003700:	08003b9c 	.word	0x08003b9c

08003704 <_init>:
 8003704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003706:	bf00      	nop
 8003708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370a:	bc08      	pop	{r3}
 800370c:	469e      	mov	lr, r3
 800370e:	4770      	bx	lr

08003710 <_fini>:
 8003710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003712:	bf00      	nop
 8003714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003716:	bc08      	pop	{r3}
 8003718:	469e      	mov	lr, r3
 800371a:	4770      	bx	lr
